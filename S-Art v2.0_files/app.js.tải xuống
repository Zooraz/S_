var $container = document.querySelector('.app-container');

var $source_IMAGE = $container.querySelector('#source_IMAGE');
var croppable;

var Step2_img = new Image;
Step2_img.src = "images/Step_2.jpg";
Step2_img.onload = function() {
  var $caman_CANVAS = $container.querySelector('#caman_CANVAS');
  setRoundedCanvas(Step2_img, caman_CANVAS); // Ставим "заглушку" в Step2
};
Img_example("images/Step_3.jpg"); // Ставим "заглушку" в Step3



var cropper = new Cropper($source_IMAGE, {
  viewMode: 3,
  dragMode: 'move',
  aspectRatio: 1,
  autoCropArea: 1,
  responsive: true,
  restore: false,
  cropBoxMovable: false,
  cropBoxResizable: false,
  toggleDragModeOnDblclick: false,
  ready: function() {
    croppable = true;
  },
});


var $rotate_INPUT = $container.querySelector('#rotate_INPUT');
var $rotate_INPUT_value = $container.querySelector('#rotate_INPUT_value');

$rotate_INPUT.addEventListener('input', function() {
  $rotate_INPUT_value.textContent = this.value;
  rotateTo.call(cropper, -Number(this.value));
});


function rotateTo(deg) {
  if (this.ready && !this.disabled && this.options.rotatable) {
    var cb = this.cropBoxData,
      cv = this.canvasData,
      im = this.imageData;
    var cbcx = (cb.left + cb.width / 2),
      cbcy = (cb.top + cb.height / 2),
      cvcx = (cv.left + cv.width / 2),
      cvcy = (cv.top + cv.height / 2);
    var x = cbcx - cvcx,
      y = cbcy - cvcy;
    var rad = (deg - (im.rotate || 0)) * Math.PI / 180,
      cos = Math.cos(rad),
      sin = Math.sin(rad);
    cv.left += x - (x * cos - y * sin);
    cv.top += y - (x * sin + y * cos);
    im.rotate = deg % 360;
    this.renderCanvas(true, true);
  }
}


var $flip_X = $container.querySelector('#flip_x');
var $flip_Y = $container.querySelector('#flip_y');
var FlipX = 1;
var FlipY = 1;
var Xp = 1;
var Yp = 1;


$flip_X.addEventListener('click', function() {
  FlipX = -FlipX;
  flip_INPUT();
});
$flip_Y.addEventListener('click', function() {
  FlipY = -FlipY;
  flip_INPUT();
});

function flip_INPUT() {
  var Kx = (Xp == FlipX) ? 0 : 1;
  var Ky = (Yp == FlipY) ? 0 : 1;

  var Deg = Number($rotate_INPUT.value);
  Deg = (Xp == FlipX) ? Deg : -Deg;
  Deg = (Yp == FlipY) ? -Deg : Deg;

  Xp = FlipX;
  Yp = FlipY;
  rotateTo.call(cropper, 0);
  Flip_move(Kx, Ky);
  cropper.scale(FlipX, FlipY);
  rotateTo.call(cropper, Deg);
  $rotate_INPUT.value = -Deg;
  $rotate_INPUT_value.textContent = -Deg;
};

function Flip_move(kX, kY) {
  var cb = cropper.cropBoxData,
    cv = cropper.canvasData
  im = cropper.imageData;
  var cbcx = (cb.left + cb.width / 2),
    cbcy = (cb.top + cb.height / 2),
    cvcx = (cv.left + cv.width / 2),
    cvcy = (cv.top + cv.height / 2);
  var x = (cbcx - cvcx) * 2,
    y = (cbcy - cvcy) * 2;
  x = x * kX;
  y = y * kY;
  cropper.move(x, y);
};


var $helpBtns = Array.prototype.slice.call($container.querySelectorAll('.app-help-button'));

$helpBtns.forEach(function($el) {
  $el.addEventListener('click', function() {
    this.parentNode.classList.toggle('app-open');
  });
});


var $file_INPUT = $container.querySelector('#file_INPUT');

$file_INPUT.addEventListener('change', function() {
  if (this.files && this.files.length) {
    var reader = new FileReader();
    reader.onload = function() {
      croppable = false;
      cropper.replace(this.result);
      $rotate_INPUT.value = 0;
      $rotate_INPUT_value.textContent = '0';
      FlipX = 1;
      FlipY = 1;
      Xp = 1;
      Yp = 1;
      var $caman_CANVAS = $container.querySelector('#caman_CANVAS');
      setRoundedCanvas(Step2_img, $caman_CANVAS); // Ставим "заглушку" в Step2
      Img_example("images/Step_3.jpg"); // Ставим "заглушку" в Step3
    };
    reader.readAsDataURL(this.files[0]);
  }
});


var $open_BTN = $container.querySelector('#open_BTN');

$open_BTN.addEventListener('click', function() {
  $file_INPUT.click();
});


var $STEP_2 = $container.querySelector('#STEP_2');
var $STEP_3 = $container.querySelector('#STEP_3');
var $crop_BTN = $container.querySelector('#crop_BTN');
var caman;
var Step2_origin_img = new Image;

$crop_BTN.addEventListener('click', function() {
  crop_BTN_click()
});

function crop_BTN_click() {
  if (!croppable) return;
  $STEP_2.scrollIntoView({
    behavior: 'smooth'
  });
  var $caman_CANVAS_ = $container.querySelector('#caman_CANVAS');
  //setRoundedCanvas(cropper.getCroppedCanvas(), $caman_CANVAS_);
  var round = $caman_CANVAS_;
  var source = cropper.getCroppedCanvas();
  var context = round.getContext('2d');
  context.save();
  context.clearRect(0, 0, round.width, round.height);
  context.imageSmoothingEnabled = true;
  context.drawImage(source, 0, 0, source.width, source.height, 0, 0, round.width, round.height);
  context.restore();
  Step2_origin_img.src = round.toDataURL('image/jpeg');
  Caman.Store.flush();
  caman = Caman($caman_CANVAS_, function() {
    resetFilters();
    renderPreset('greyscale');
  });
};

function setRoundedCanvas(source, round) {
  var context = round.getContext('2d');
  context.save();
  context.clearRect(0, 0, round.width, round.height);
  context.imageSmoothingEnabled = true;
  context.drawImage(source, 0, 0, source.width, source.height, 0, 0, round.width, round.height);
  context.restore();
}


var $filters = Array.prototype.slice.call($container.querySelectorAll('.app-filter-ctrl .app-range-input'));
var $fValues = Array.prototype.slice.call($container.querySelectorAll('.app-filter-ctrl .app-range-value'));
var filters = {},
  busy, changed;

$filters.forEach(function($el, i) {
  var filter = $el.getAttribute('data-filter');
  filters[filter] = Number($el.value);
  $el.addEventListener('change', function() {
    if (!caman) {
      $el.value = 0;
      return;
    }
    $fValues[i].textContent = filters[filter] = Number($el.value);
    renderFilters();
  });
});

function resetFilters() {
  for (var i = 0; i < $filters.length; i++) {
    filters[$filters[i].getAttribute('data-filter')] = 0;
    $filters[i].value = $filters[i].defaultValue;
    $fValues[i].textContent = $filters[i].defaultValue;
  }
}

function renderFilters() {
  if (!caman) return;
  if (busy) {
    changed = true;
    return;
  } else {
    changed = false;
  }
  busy = true;
  caman.revert(false);
  for (var filter in filters) {
    var value = filters[filter];
    if (value != 0) caman[filter](value);
  }
  caman.render(function() {
    busy = false;
    if (changed) renderFilters();
  });
}


var $presets = Array.prototype.slice.call($container.querySelectorAll('.app-preset-ctrl'));
var presetBusy;

$presets.forEach(function($el) {
  var preset = $el.getAttribute('data-preset');
  $el.addEventListener('click', function() {
    resetFilters();
    renderPreset(preset);
  });
});


var preset_ = 'greyscale';

function renderPreset(preset) {
  if (!caman) return;
  if (presetBusy) return;
  if (preset == 'reset_') preset = preset_;
  presetBusy = true;
  var $active = $container.querySelector('a.app-active');
  if ($active) $active.className = $active.className.replace(' app-active', '');
  var $preset = $container.querySelector('a[data-preset="' + preset + '"]');
  var name = $preset.textContent;
  $preset.className += ' app-active';
  $preset.textContent = 'Rendering...';
  preset_ = preset;
  caman.reset();
  caman[preset]().greyscale(); // Алгоритм работает только с Серой картинкой!!!
  caman.render(function() {
    presetBusy = false;
    $preset.textContent = name;
    this.resetOriginalPixelData();
  });
}


var $preview_CANVAS = $container.querySelector('#preview_CANVAS');
var $preview_CTX = $preview_CANVAS.getContext('2d');

// var setPreviewCanvas = debounce(function() {
//   StopDtawFl = true;
//   TextTo_info_PANEL(R_color, 'This is just a preview! For the final result, press\u00A0[Upload]');
//   var temp_canvas = document.createElement('canvas');
//   temp_canvas.width = 800;
//   temp_canvas.height = 800;
//   var temp_cnv = temp_canvas.getContext('2d');
//   temp_cnv.drawImage(
//     caman.canvas,
//     0, 0, caman.canvas.width, caman.canvas.height,
//     0, 0, temp_canvas.width, temp_canvas.height
//   );
//
//   Caman(temp_canvas, function() {
//     this.preview();
//     this.render(function() {
//       $preview_CANVAS.getContext('2d').drawImage(temp_canvas,
//         0, 0, temp_canvas.width, temp_canvas.height,
//         0, 0, $preview_CANVAS.width, $preview_CANVAS.height
//       );
//     });
//   });
// }, 500);

var $preview_BTN = $container.querySelector('#preview_BTN');
$preview_BTN.addEventListener('click', function() {
  Caman(caman.canvas, function() {
    upload_BTN.classList.add('disabled');
    upload_BTN_S2.classList.add('disabled');
    this.preview();
    this.render(function() {
      setTimeout(function() {
        caman = Caman(caman.canvas, function() {
          renderFilters();
          upload_BTN.classList.remove('disabled');
          upload_BTN_S2.classList.remove('disabled');
        });
      }, 3000);
    });
  });
});

var $upload_BTN = $container.querySelector('#upload_BTN');
$upload_BTN.addEventListener('click', function() {
  $STEP_3.scrollIntoView({
    behavior: 'smooth'
  });
  preUpload();
});

var $upload_BTN_S2 = $container.querySelector('#upload_BTN_S2');
$upload_BTN_S2.addEventListener('click', function() {
  $STEP_3.scrollIntoView({
    behavior: 'smooth'
  });
  preUpload();
});

const R_color = "red";
const G_color = "green";
const Y_color = "yellow";
var $info_PANEL = $container.querySelector('#info_PANEL');

function TextTo_info_PANEL(color, sss) {
  $info_PANEL.textContent = sss;
  var $info_PANEL_CNT = $container.querySelector('#info_PANEL_CNT');
  $info_PANEL_CNT.classList.add('app-info-panel-flash-' + color);
  setTimeout(function() {
    $info_PANEL_CNT.classList.remove('app-info-panel-flash-' + color);
  }, 2500);
};


function preUpload() {
  StopDtawFl = true;
  if (!caman) {
    TextTo_info_PANEL(Y_color, 'First you need to go through Step1\u00A0&\u00A0Step2 or\u00A0press\u00A0Example.');
    return;
  }

  StopDtawFl = true;
  var img = new Image;
  img.src = "images/Step3_on_Server.jpg";
  img.onload = function() {
    $preview_CANVAS.getContext('2d').drawImage(img, 0, 0);
  }
  TextTo_info_PANEL(Y_color, 'Loading an image... Wait a while please!');


  if (caman.canvas.toBlob) {
    caman.canvas.toBlob(upload);
  } else if (caman.canvas.msToBlob) {
    upload(caman.canvas.msToBlob());
  }
}

function upload(blob) {
  upload_BTN.classList.add('disabled');
  upload_BTN_S2.classList.add('disabled');
  process_draw_BTN.classList.add('disabled');
  fast_draw_BTN.classList.add('disabled');

  var formData = new FormData();
  formData.append('filename', getSID());
  formData.append('file', blob);

  var xhr = new XMLHttpRequest();
  xhr.open('POST', 'server/upload.php', true);
  xhr.onloadstart = function() {
    // Start

  };
  xhr.onload = function() {
    if (this.status == 200) {
      try {
        var data = JSON.parse(xhr.responseText);
      } catch (e) {
        TextTo_info_PANEL(R_color, 'Upload failure - JSON error!');
      }
      StopDtawFl = true;
      var img = new Image;
      img.onload = function() {
        $preview_CTX.drawImage(img, 0, 0);
        $chain_TXT.val(data.txt);
        TextTo_info_PANEL(G_color, 'Upload success! Now you can press [Fast] or [Process], try\u00A0it.');
        setTimeout(startDrawing(DRAW), 2000);
      };
      img.onerror = function() {
        TextTo_info_PANEL(R_color, 'Upload failure - Image error!');
      };
      StopDtawFl = true;
      // Даем время  прерваться Preview
      setTimeout(function() {
        img.src = "data:image/png;base64," + data.img;
      }, 500);
    } else {
      TextTo_info_PANEL(R_color, 'Upload failure - Server error!');
      alert('Upload failure - Server error!');
    }
  };
  xhr.onerror = function() {
    TextTo_info_PANEL(R_color, 'Upload failure - Network error!');
    alert('Upload failure - Network error!');
  };
  xhr.onloadend = function() {
    // Finish
    upload_BTN.classList.remove('disabled');
    upload_BTN_S2.classList.remove('disabled');
    process_draw_BTN.classList.remove('disabled');
    fast_draw_BTN.classList.remove('disabled');
  };
  xhr.send(formData);
}

function getSID() {
  return Math.random().toString(36).substr(2, 9) + '_' +
    (Number($strings_INPUT.value) + 10000).toString().substr(1, 4) + '_' +
    (Number($d_force_INPUT.value) + 10000).toString().substr(2, 3) + '_' +
    (Number($refiner_INPUT.value) + 10000).toString().substr(2, 3);
}


var $chain_TXT = $container.querySelector('#chain_TXT');
var $placeholder = $container.querySelector('.app-txt-placeholder');

$chain_TXT.val = function(value) {
  this.value = value;
  $placeholder.style.opacity = value ? 0 : 1;
};
$chain_TXT.val('');

$chain_TXT.addEventListener('focus', function() {
  if (this.value) return;
  $placeholder.style.opacity = 0;
});
$chain_TXT.addEventListener('blur', function() {
  if (this.value) return;
  $placeholder.style.opacity = 1;
});



Caman.Filter.register('brightUp', function() {
  this.brightness(7);
  this.exposure(5);
  this.contrast(16);
  return this.vibrance(7); // В конце фильтров обязательный return, иначе глючит Caman при последовательном вызове методов
});
Caman.Filter.register('gamma_', function(val) {
  val = (val < 0) ? (10 + val) / 10 : val + 1;
  return this.gamma(val);
});
Caman.Filter.register('preview', function() {
  this.contrast(-7);
  this.exposure(-30);
  this.clip(7);
  this.noise(30);
  this.stackBlur(2);
});
Caman.Filter.register('reset_', function() {
  return this;
});

function debounce(f, ms, c) {
  return function() {
    if (c) return;
    f.apply(this, arguments);
    c = true;
    setTimeout(function() {
      c = false
    }, ms);
  };
}

// Фильтр Виньетка
Caman.Filter.register("vignette_", function(strength) {
  var bezier, center, end, start;
  var size = this.dimensions.width / 2 * 0.3;
  if (strength > 30) {
    size = this.dimensions.width / 2 * strength / 100;
    strength = 30;
  }
  divMax = 70;
  divEmp = (1000 / strength) + divMax;
  center = [this.dimensions.width / 2, this.dimensions.height / 2];
  start = this.dimensions.width / 2;
  end = start - size;
  bezier = Caman.Calculate.bezier([0, 1], [30, 30], [70, 60], [100, 80]);
  return this.process("vignette", function(rgba) {
    var dist, div, loc;
    loc = rgba.locationXY();
    dist = Caman.Calculate.distance(loc.x, loc.y, center[0], center[1]);
    if (dist > end) {
      div = Math.max(1, (bezier[Math.round(((dist - end) / size) * 100)])); // / 10) * strength);
      rgba.r = (div / divEmp) * (255 * (divMax - div) / divEmp) + ((divEmp - div) / divEmp) * (rgba.r);
      rgba.g = rgba.r; //(Math.pow(rgba.g / 255, div) * 255);
      rgba.b = rgba.r; //(Math.pow(rgba.b / 255, div) * 255);
    }
    return rgba;
  });
});

var mobile_detect = new MobileDetect(window.navigator.userAgent);
// if (mobile_detect.phone() != null) alert('When S-ART working on some smartphones,\nyou may encounter limitations related to screen size and incorrect display of strings thickness in the Preview.');
// console.log("Phone: " + mobile_detect.phone());   (/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) or

// if ( (navigator.userAgent.toLowerCase().match(/(ipad|iphone)/)) || (mobile_detect.phone() != null)) {
//   alert('When S-ART working on some smartphones and Safari browser,\nyou may encounter limitations related to screen size and incorrect display of strings thickness in the round Preview window in Step 3.');
// };
//
// if ( (mobile_detect.userAgent() = "Safari") || (mobile_detect.phone() != null)) {
//   alert('When S-ART working on some smartphones and Safari browser,\nyou may encounter limitations related to screen size and incorrect display of strings thickness in the round Preview window in Step 3.');
// };

if ((mobile_detect.userAgent() == "Safari")) {
  alert('When S-ART working on some smartphones and Safari browser,\nyou may encounter limitations related to screen size and incorrect display of strings thickness in the round Preview window in Step 3.');
};

// if ((/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) || (/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent))) {
//   alert('When S-ART working on some smartphones and Safari browser,\nyou may encounter limitations related to screen size and incorrect display of strings thickness in the round Preview window in Step 3.');
// };


//============================= S-Art section =============================

var PCanId = $preview_CANVAS;
var PCanT_ = document.createElement('canvas');
PCanT_.width = PCanId.width;
PCanT_.height = PCanId.height;
var PC = PCanId.getContext('2d');
var PC_ = PCanT_.getContext('2d');
PC.fillStyle = '#ffffff';
PC.fillRect(0, 0, PCanId.width, PCanId.height);

var Dim_XY = 800;
var Pins_N = 250;
var Nseg = 10;
var Nlins = 7;
var pin_coords = [];

var fastFl = false;
var drawFl = false;
var StopDtawFl = false;
var FAST = 0;
var DRAW = 1;


function CalculatePins(Pins_N) {
  console.log('>>>>>> CalculatePins...');
  var center = Dim_XY / 2;
  var radius = Dim_XY / 2 - 1 / 2 - 10;

  for (var i = 0; i < Pins_N; i++) {
    var angle = 2 * Math.PI * i / Pins_N;
    var X_Y = [
      Math.floor(center + radius * Math.cos(angle)),
      Math.floor(center + radius * Math.sin(angle))
    ];
    pin_coords.push(X_Y);
  };
};

function Sleep(ms) {
  return new Promise(function(resolve) {
    setTimeout(resolve, ms);
  });
}


// Функция быстрого Fast рисования картинки по 'цепочке'
function fastDraw() {
  if (StopDtawFl) return;
  fastFl = true;
  TextTo_info_PANEL(G_color, 'Fast Drawing start...');
  PC.save();

  PC.lineWidth = 0.3;
  PC.strokeStyle = 'black';

  PC.fillStyle = '#ffffff';
  PC.fillRect(0, 0, PCanId.width, PCanId.height);

  var XY, X, Y, XY_, X_, Y_;

  //PC.beginPath(); - если сначала создать весь путь линии, а потом его stroke();
  // глючит на iPhone старых моделей - Fast дает серую размытую картинку, а Process работает почти что корректно
  // - приходится рисовать Fast по одной линии...
  // и как выяснилось, все одно непредсказуемо глючит - возможно из-за масштабирования канваса???
  for (var i = 0, len = chain_arr.length - 1; i < len; i++) {
    if (StopDtawFl) {
      fastFl = false;
      return false;
    }
    PC.beginPath();
    XY = pin_coords[chain_arr[i]];
    X = XY[0];
    Y = XY[1];
    XY_ = pin_coords[chain_arr[i + 1]];
    X_ = XY_[0];
    Y_ = XY_[1];
    PC.moveTo(X, Y);
    PC.lineTo(X_, Y_);
    PC.stroke();
  }
  //PC.stroke();

  PC.restore();
  TextTo_info_PANEL(G_color, 'Fast Drawing end.');
  fastFl = false;
};

// Функция постепенного Process рисования картинки по 'цепочке'
async function drawLines() {
  if (StopDtawFl) return;
  drawFl = true;
  TextTo_info_PANEL(G_color, 'Process Drawing start...');
  PC.save();

  PC.fillStyle = '#ffffff';
  PC.fillRect(0, 0, PCanId.width, PCanId.height);
  PC.lineWidth = 0.3;
  PC_.fillStyle = '#ffffff';
  PC_.fillRect(0, 0, PCanT_.width, PCanT_.height);
  PC_.lineWidth = 0.3;
  PC_.strokeStyle = 'black';

  var XY, X, Y, XY_, X_, Y_;
  var R, G, B;
  var dCol = Math.floor(255 / Nlins) - 1;
  var dLine = (1.5 - 0.3) / Nlins;
  var CharN = chain_arr.length;

  for (var i = 0; i < (CharN - 1 - Nlins); i++) {
    var S = Nlins;
    if (i < Nlins) S = i;

    // Рисуем 'цветные' линии, последнюю из них рисуем медленно
    for (var j = 0; j < S; j++) {
      XY = pin_coords[chain_arr[i + j]];
      X = XY[0];
      Y = XY[1];
      XY_ = pin_coords[chain_arr[i + j + 1]];
      X_ = XY_[0];
      Y_ = XY_[1];

      // На нулевой итерации рисуем линию во вспомогательный канвас
      if (j == 0) {
        PC_.beginPath();
        PC_.moveTo(X, Y);
        PC_.lineTo(X_, Y_);
        PC_.stroke();
      };

      var K = 2; // коэффициент плавности изменения цвета
      B = Math.floor(170 / K * Math.pow(K + 1, j / Nlins));
      R = G = Math.floor(60 / K * Math.pow(K + 1, j / Nlins));
      PC.lineWidth = 0.3 + j * dLine;
      PC.strokeStyle = 'rgb(' + R + ',' + G + ',' + B + ')';

      // Последнюю 'цветную' рисуем сегментами после этого цикла
      if (j != (S - 1)) {
        PC.beginPath();
        PC.moveTo(X, Y);
        PC.lineTo(X_, Y_);
        PC.stroke();
      }
    }
    var Xi = X;
    var Yi = Y;
    var dX = (X_ - X) / Nseg;
    var dY = (Y_ - Y) / Nseg;
    // Рисуем последнюю 'цветную' линию медленно, сегментами
    for (var j = 0; j < Nseg; j++) {
      if (StopDtawFl) {
        drawFl = false;
        return false;
      }
      PC.beginPath();
      PC.moveTo(Xi, Yi);
      PC.lineTo(Xi + dX, Yi + dY);
      Xi = Xi + dX;
      Yi = Yi + dY;
      PC.stroke();
      await Sleep((502 - $draw_speed_INPUT.value) / Nseg);
    };
    $info_PANEL.innerHTML = 'Step ' + i + ' of\u00A0' + CharN + '. <br/>You can press [Fast] or set Speed range.';
    await Sleep((502 - $draw_speed_INPUT.value));
    PC.drawImage(PCanT_, 0, 0);
  }

  PC.restore();
  TextTo_info_PANEL(G_color, 'Process Drawing end.');
  drawFl = false;
};

async function startDrawing(mode) {
  StopDtawFl = true;
  TextTo_info_PANEL(G_color, 'Drawing start...');
  while (drawFl || fastFl) {
    await Sleep(500);
  }

  if (!chain_TXT.value) ChainTXT_example1();
  await Sleep(500);

  console.log('Chain parser start...');

  chain_arr = [];
  chain_arr = chain_TXT.value.split(',');
  var a = 0;

  for (var i = 0; i < chain_arr.length; i++) {
    a = parseInt(chain_arr[i], 10);
    //chain_arr[i] = Number(chain_arr[i]);
    chain_arr[i] = Number.isNaN(a) ? 0 : a; // Исключаем нечисловые значения т.к. пользователь мог что то случайно ввести в текстовое поле и туда передаются [Strings: .....]
  }

  console.log('Chain parser end.');

  var max = Math.max.apply(null, chain_arr) + 1;
  CalculatePins(max);
  await Sleep(1000);

  StopDtawFl = false;
  if (mode == DRAW) drawLines();
  if (mode == FAST) fastDraw();
  TextTo_info_PANEL(G_color, 'Drawing end.');
}

var $process_draw_BTN = $container.querySelector('#process_draw_BTN');
$process_draw_BTN.addEventListener('click', function() {
  startDrawing(DRAW);
});

var $fast_draw_BTN = $container.querySelector('#fast_draw_BTN');
$fast_draw_BTN.addEventListener('click', function() {
  startDrawing(FAST);
});

var $strings_INPUT = $container.querySelector('#strings_INPUT');
var $strings_INPUT_value = $container.querySelector('#strings_INPUT_value');
$strings_INPUT.addEventListener('input', function() {
  $strings_INPUT_value.textContent = $strings_INPUT.value;
  TextTo_info_PANEL(Y_color, 'To see the result with new settings, press\u00A0[Upload] button!');
});

var $d_force_INPUT = $container.querySelector('#d_force_INPUT');
var $d_force_INPUT_value = $container.querySelector('#d_force_INPUT_value');
$d_force_INPUT.addEventListener('input', function() {
  $d_force_INPUT_value.textContent = $d_force_INPUT.value;
  TextTo_info_PANEL(Y_color, 'To see the result with new settings, press\u00A0[Upload] button!');
});

var $refiner_INPUT = $container.querySelector('#refiner_INPUT');
var $refiner_INPUT_value = $container.querySelector('#refiner_INPUT_value');
$refiner_INPUT.addEventListener('input', function() {
  $refiner_INPUT_value.textContent = $refiner_INPUT.value;
  TextTo_info_PANEL(Y_color, 'To see the result with new settings, press\u00A0[Upload] button!');
});

var $draw_speed_INPUT = $container.querySelector('#draw_speed_INPUT');
var $draw_speed_INPUT_value = $container.querySelector('#draw_speed_INPUT_value');
$draw_speed_INPUT.addEventListener('change', function() {
  $draw_speed_INPUT_value.textContent = $draw_speed_INPUT.value;
});



//======================== Post Maker ===========================

// Loader
function send_Data() {
  try {
    var data = JSON.parse(data_TXT.value);
  } catch (e) {
    alert('The Date field must contain correct data!');
    return
  };
  StopDtawFl = true;

  //cropper.replace(data.Image);
  if (data.Image.length) {
    croppable = false;
    cropper.replace(data.Image);
    $rotate_INPUT.value = 0;
    $rotate_INPUT_value.textContent = '0';
    FlipX = 1;
    FlipY = 1;
    Xp = 1;
    Yp = 1;

    $chain_TXT.val(data.Chain);
    //startDrawing(FAST);

    setTimeout(function() {
      startDrawing(FAST);
      crop_BTN_click();
      setTimeout(function() {
        preset_ = data.Preset;
        preset_Reset_BTN.click();
        setTimeout(function() {
          Bright_val.value = data.Bright;
          Contrast_val.value = data.Contrast;
          Exposure_val.value = data.Exposure;
          Vignette_val.value = data.Vignette;
          Clip_val.value = data.Clip;
          Sharpen_val.value = data.Sharpen;
          StBlur_val.value = data.StBlur;

          $filters.forEach(function($el, i) {
            var filter = $el.getAttribute('data-filter');
            filters[filter] = Number($el.value);
            if (!caman) {
              $el.value = 0;
              return;
            }
            $fValues[i].textContent = filters[filter] = Number($el.value);
            renderFilters();
          });

          strings_INPUT.value = data.Strings;
          strings_INPUT_value.textContent = $strings_INPUT.value;
          d_force_INPUT.value = data.dForce;
          d_force_INPUT_value.textContent = $d_force_INPUT.value;
          refiner_INPUT.value = data.Refiner;
          refiner_INPUT_value.textContent = $refiner_INPUT.value;


          //alert('Ok - data is loaded!\nThe template will appear after the calculation, as if you yourself have made all the settings.\nYou can use these templates to help you learn and understand more about how to adjust settings for different photos.');
        }, 1000);
      }, 500);
    }, 200);
  //  Img_example("images/Step_3.jpg"); // Ставим "заглушку" в Step3
  } else {
    alert("Data no have Image!");
    return;
  }
};


// Обработчик postMessage из Вордпресс
function listener(event) {
  if (event.origin != 'https://blog.s-art.pro') {
    // что-то прислали с неизвестного домена - проигнорируем..
    return;
  }
  //alert("получено: " + event.data);

  // Если ответ на function postHandler()
  const dataObj = JSON.parse(event.data);
  if (dataObj.title) {
    renderResult(dataObj);
    return;
  }

  // Если пришел запрос на function send_Data()
  data_TXT.value = event.data;
  setTimeout(function() {
    send_Data()
  }, 100);

}
if (window.addEventListener) {
  window.addEventListener("message", listener);
} else {
  // IE8
  window.attachEvent("onmessage", listener);
}



// =================== Модальные Окна ========================


const wpPath = 'https://blog.s-art.pro' // если в корне сайта то ''

const $modal = document.createElement('div')
$modal.classList.add('embroidery-modal')
$modal.classList.add('hidden')

const $content = document.createElement('form')
$content.classList.add('embroidery-modal__inner')

$modal.appendChild($content)
document.body.appendChild($modal)

// const $Send_Template_BTN = document.getElementById('Send_Template_BTN')
// const $Send_HelpTemplate_BTN = $container.querySelector('#Send_HelpTemplate_BTN');
const $textAreaData = document.getElementById('data_TXT')


let submitterType
let postCategory

// Обработка кнопки [Data Set] в Редакторе S-Art
Send_Template_BTN.addEventListener('click', function() {
Post_Template(5); // 5 = ready templates
});
Send_HelpTemplate_BTN.addEventListener('click', function() {
Post_Template(42); // 42 = hidden
});


function Post_Template(Category) {
  postCategory = Category;
  // Подготовка JSON
  var data = {
    Bright: Bright_val.value,
    Contrast: Contrast_val.value,
    Exposure: Exposure_val.value,
    Vignette: Vignette_val.value,
    Clip: Clip_val.value,
    Sharpen: Sharpen_val.value,
    StBlur: StBlur_val.value,

    Preset: preset_,

    Strings: strings_INPUT.value,
    dForce: d_force_INPUT.value,
    Refiner: refiner_INPUT.value,

    Chain: chain_TXT.value, // Тестовая "цепочка"

    //Image: cropper.getCroppedCanvas().toDataURL('image/jpeg'),
    Image: Step2_origin_img.src,
    ImageRes: PCanId.toDataURL('image/jpeg'),
  };
  data_TXT.value = JSON.stringify(data);
  //alert('Ok - Data is ready!!! ');

  //Проверка на обязательное содержание полей
  if ((data.Image == '') || (data.Chain == '') ) {
    alert('First, you need pass all the Steps of preparing the Template.');
    return false;
  };

  const image = getImage()

  fetch('https://blog.s-art.pro/wp-json/insert_post/v1/posts/tags', {
      method: 'POST'
    })
    .then(function(response) {
      if (response.status !== 200) {
        console.log('Looks like there was a problem. Status Code: ' + response.status);
        var result = {
          title: 'Error',
          description: 'Request not process'
        }
        renderResult(result);
        return;
      }
      response.json().then(function(data) {
        console.log(data.tags_list);

        //Составление выпадающего списка multiple
        var tags_list = '';
        data.tags_list.forEach((tag, i) => {
          tags_list += '<option class="select_item">' + tag + '</option>';
        });
        //Если вызвано по кнопке Past for Help - tags не отображаются
        var tags_disabled = '';
        var tags_required = 'required';
        if (Category == 42) {
          tags_disabled = 'disabled';
          tags_required = '';
        }

        $content.innerHTML = `
    						<div class="embroidery-modal__close" data-type="close">&#10006;</div>
                <!-- <div class="row">
                  <div class="col l12">
                    <h3 class="embroidery-modal__title">Fill post data</h3>
                  </div>
                </div> -->
                <div class="row">
                  <div class="col l12"><img class="embroidery-modal__img" src="${image}"></div>
                  <div class="col l12 field">
                    <input class="embroidery-modal__input" pattern=".{3,}" title="minimum 3 character" required id="postTitle" placeholder="Title">
                  </div>
                  <div class="col l12 field">
                    <textarea class="embroidery-modal__text-area" required id="postDescription" placeholder="Description"></textarea>
                  </div>
                  <div class="col l12 field" title="Enter one or more Tags separated by \', \'" >
                    <input class="embroidery-modal__input" id="postTags" ${tags_required} ${tags_disabled} placeholder="Tags, for ex.: plants, rose, bouquet"></input>
                    <select name="select_tags" size="3" class="embroidery-modal__text-area" ${tags_disabled} onchange= "($content.postTags.value == \'\')?$content.postTags.value += this.options[this.selectedIndex].text :$content.postTags.value += \', \' + this.options[this.selectedIndex].text"  title= "...also your can choose Tags from this list">
                      ${tags_list}
                    </select>
                  </div>
                  <div class="col l12 embroidery-modal__loader">
                    <button class="embroidery-modal__button" data-type="publishPost" style= 'width: 100% !important'>Publish</button>
                    <button class="embroidery-modal__button" data-type="close" style= 'width: 100% !important'>Cancel</button>
                  </div>
                </div>
    	`
        $modal.classList.remove('hidden');
      });
    })
    .catch(function(err) {
      console.log('Fetch Error :-S', err);
      let result = {
        title: 'Error',
        description: 'Error on server, try letter!'
      }
      renderResult(result)
    });
}

//Обработчик списка Меток
$content.onclick = function(e) {
  submitterType = e.target.dataset.type
  if (submitterType === 'close') closeModal()
  if (submitterType === 'postHandler') postCategory = e.target.dataset.category
}

$content.addEventListener('submit', function(e) {

  e.preventDefault()

  // if ( submitterType === 'postHandler' ) postHandler()
  if (submitterType === 'publishPost') postHandler(3)
})



function nodeIndex(element) {
  return [...element.parentElement.childNodes].indexOf(element)
}

function getImage() {
  const dataString = $textAreaData.value
  const dataJson = JSON.parse(dataString)
  const image = dataJson.ImageRes
  return image
}


// Отображение кнопок только для зарегестрированных пользователей
function readCookie(name) {
  var matches = document.cookie.match(new RegExp(
    "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
  ));
  return matches ? decodeURIComponent(matches[1]) : undefined;
}


function postHandler() {

if ( !(readCookie('wp_user') > 0)) {
  alert('Only registered users can post templates.\nFor authentication, click "Log In" on the left side of the interface.');
  return false;
}
  const title = $content.querySelector('#postTitle').value
  const description = 'Strings: ' + strings_INPUT.value.toString() + '\n' + $content.querySelector('#postDescription').value
  const tags = $content.querySelector('#postTags').value.split(', ');
  console.log(tags);

  var post = JSON.stringify({
    title: title,
    description: description,
    tags: tags,
    category: postCategory,
  })

  var postData = JSON.stringify({
    post: post,
    image_json: $textAreaData.value,
  })

  renderLoader()

  const win = window.parent.frames.frame2
  win.postMessage(postData, "https://blog.s-art.pro")
}

function renderLoader() {
  $content.innerHTML = `
          <div class="embroidery-modal__close" data-type="close">&#10006;</div>
          <div class="row">
            <div class="col l12">
              <h3 class="embroidery-modal__title">Loading...</h3>
            </div>
          </div>
          <div class="row">
            <div class="col l12">
              <div class="embroidery-modal__loader"><div class="lds-ring"><div></div><div></div><div></div><div></div></div></div>
            </div>
          </div>
  `
}

function renderResult(res) {
  const {
    title,
    description
  } = res
  $content.innerHTML = `
          <div class="embroidery-modal__close" data-type="close">&#10006;</div>
          <div class="row">
            <div class="col l12">
              <h3 class="embroidery-modal__title">${title}</h3>
            </div>
          </div>
          <div class="row">
            <div class="col l12">
              <p class="embroidery-modal__description">${description}</p>
            </div>
          </div>
          <div class="row">
            <div class="col l12 field">
              <button class="embroidery-modal__button" data-type="close">Ok</button>
            </div>
          </div>
	`
}

function closeModal() {
  $modal.classList.add('hidden')
}



//======================== SaveAs =============================
/*
 * FileSaver.js
 * A saveAs() FileSaver implementation.
 *
 * By Eli Grey, http://eligrey.com
 *
 * License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)
 * source  : http://purl.eligrey.com/github/FileSaver.js
 */

// The one and only way of getting global scope in all environments
// https://stackoverflow.com/q/3277182/1008999
var _global = typeof window === 'object' && window.window === window ?
  window : typeof self === 'object' && self.self === self ?
  self : typeof global === 'object' && global.global === global ?
  global :
  this

function bom(blob, opts) {
  if (typeof opts === 'undefined') opts = {
    autoBom: false
  }
  else if (typeof opts !== 'object') {
    console.warn('Deprecated: Expected third argument to be a object')
    opts = {
      autoBom: !opts
    }
  }

  // prepend BOM for UTF-8 XML and text/* types (including HTML)
  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
  if (opts.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
    return new Blob([String.fromCharCode(0xFEFF), blob], {
      type: blob.type
    })
  }
  return blob
}

function download(url, name, opts) {
  var xhr = new XMLHttpRequest()
  xhr.open('GET', url)
  xhr.responseType = 'blob'
  xhr.onload = function() {
    saveAs(xhr.response, name, opts)
  }
  xhr.onerror = function() {
    console.error('could not download file')
  }
  xhr.send()
}

function corsEnabled(url) {
  var xhr = new XMLHttpRequest()
  // use sync to avoid popup blocker
  xhr.open('HEAD', url, false)
  try {
    xhr.send()
  } catch (e) {}
  return xhr.status >= 200 && xhr.status <= 299
}

// `a.click()` doesn't work for all browsers (#465)
function click(node) {
  try {
    node.dispatchEvent(new MouseEvent('click'))
  } catch (e) {
    var evt = document.createEvent('MouseEvents')
    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,
      20, false, false, false, false, 0, null)
    node.dispatchEvent(evt)
  }
}

// Detect WebView inside a native macOS app by ruling out all browsers
// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too
// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos
var isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)

var saveAs = _global.saveAs || (
  // probably in some web worker
  (typeof window !== 'object' || window !== _global) ?
  function saveAs() {
    /* noop */ }

  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView
  :
  ('download' in HTMLAnchorElement.prototype && !isMacOSWebView) ?
  function saveAs(blob, name, opts) {
    var URL = _global.URL || _global.webkitURL
    var a = document.createElement('a')
    name = name || blob.name || 'download'

    a.download = name
    a.rel = 'noopener' // tabnabbing

    // TODO: detect chrome extensions & packaged apps
    // a.target = '_blank'

    if (typeof blob === 'string') {
      // Support regular links
      a.href = blob
      if (a.origin !== location.origin) {
        corsEnabled(a.href) ?
          download(blob, name, opts) :
          click(a, a.target = '_blank')
      } else {
        click(a)
      }
    } else {
      // Support blobs
      a.href = URL.createObjectURL(blob)
      setTimeout(function() {
        URL.revokeObjectURL(a.href)
      }, 4E4) // 40s
      setTimeout(function() {
        click(a)
      }, 0)
    }
  }

  // Use msSaveOrOpenBlob as a second approach
  :
  'msSaveOrOpenBlob' in navigator ?
  function saveAs(blob, name, opts) {
    name = name || blob.name || 'download'

    if (typeof blob === 'string') {
      if (corsEnabled(blob)) {
        download(blob, name, opts)
      } else {
        var a = document.createElement('a')
        a.href = blob
        a.target = '_blank'
        setTimeout(function() {
          click(a)
        })
      }
    } else {
      navigator.msSaveOrOpenBlob(bom(blob, opts), name)
    }
  }

  // Fallback to using FileReader and a popup
  :
  function saveAs(blob, name, opts, popup) {
    // Open a popup immediately do go around popup blocker
    // Mostly only available on user interaction and the fileReader is async so...
    popup = popup || open('', '_blank')
    if (popup) {
      popup.document.title =
        popup.document.body.innerText = 'downloading...'
    }

    if (typeof blob === 'string') return download(blob, name, opts)

    var force = blob.type === 'application/octet-stream'
    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari
    var isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent)

    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {
      // Safari doesn't allow downloading of blob URLs
      var reader = new FileReader()
      reader.onloadend = function() {
        var url = reader.result
        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')
        if (popup) popup.location.href = url
        else location = url
        popup = null // reverse-tabnabbing #460
      }
      reader.readAsDataURL(blob)
    } else {
      var URL = _global.URL || _global.webkitURL
      var url = URL.createObjectURL(blob)
      if (popup) popup.location = url
      else location.href = url
      popup = null // reverse-tabnabbing #460
      setTimeout(function() {
        URL.revokeObjectURL(url)
      }, 4E4) // 40s
    }
  }
)

_global.saveAs = saveAs.saveAs = saveAs

if (typeof module !== 'undefined') {
  module.exports = saveAs;
};

//======================== Examples ===========================

function Img_example(example_img) {
  var Img = new Image();
  Img.src = example_img;
  Img.onload = function() {
    $preview_CANVAS.getContext('2d').drawImage(Img, 0, 0);
  }
};

// Example 1
var $example1_BTN = $container.querySelector('#example1_BTN');
$example1_BTN.addEventListener('click', function() {
  StopDtawFl = true;
  setTimeout(ChainTXT_example1(), 1000);
});

function ChainTXT_example1() {
  $chain_TXT.val('0, 213, 246, 207, 230, 210, 243, 228, 200, 240, 198, 248, 189, 237, 190, 229, 201, 247, 206, 231, 220, 168, 229, 193, 235, 176, 226, 181, 210, 244, 215, 242, 173, 227, 202, 238, 183, 247, 208, 245, 214, 249, 161, 248, 205, 195, 228, 204, 185, 202, 217, 173, 237, 156, 246, 153, 248, 158, 238, 160, 249, 188, 245, 179, 214, 201, 239, 225, 191, 236, 174, 216, 241, 197, 244, 232, 161, 227, 175, 235, 203, 149, 242, 171, 189, 230, 199, 163, 226, 162, 247, 147, 249, 146, 247, 148, 248, 157, 245, 154, 238, 188, 241, 143, 239, 142, 235, 152, 246, 148, 244, 146, 246, 139, 249, 150, 245, 147, 248, 164, 240, 167, 221, 176, 223, 233, 180, 228, 172, 195, 211, 243, 213, 179, 234, 142, 241, 141, 242, 140, 244, 137, 242, 144, 243, 145, 245, 138, 247, 155, 236, 136, 242, 145, 240, 144, 233, 142, 237, 133, 240, 140, 233, 141, 235, 133, 238, 134, 239, 131, 238, 132, 240, 138, 232, 140, 234, 132, 236, 131, 237, 129, 234, 130, 239, 128, 233, 130, 236, 151, 199, 187, 149, 228, 129, 229, 128, 238, 127, 234, 123, 237, 120, 229, 132, 235, 148, 206, 183, 207, 147, 188, 198, 231, 138, 246, 209, 181, 166, 223, 126, 228, 128, 236, 134, 232, 141, 212, 180, 211, 143, 204, 218, 178, 214, 140, 243, 146, 208, 114, 233, 131, 232, 136, 231, 134, 243, 139, 248, 104, 229, 127, 227, 125, 221, 128, 226, 184, 151, 181, 145, 210, 132, 231, 139, 241, 135, 242, 98, 229, 134, 216, 125, 228, 130, 230, 131, 175, 141, 171, 147, 203, 193, 222, 126, 235, 224, 165, 198, 125, 235, 124, 236, 121, 227, 124, 226, 138, 194, 152, 164, 225, 109, 234, 118, 239, 135, 217, 123, 214, 124, 228, 139, 204, 114, 223, 109, 233, 118, 232, 119, 230, 133, 212, 112, 230, 107, 224, 113, 209, 111, 231, 116, 236, 122, 226, 190, 146, 189, 91, 224, 116, 211, 119, 206, 129, 171, 128, 176, 149, 186, 201, 133, 241, 137, 247, 105, 231, 106, 230, 219, 177, 215, 122, 222, 107, 227, 160, 202, 150, 185, 168, 128, 201, 116, 206, 111, 208, 112, 235, 108, 208, 182, 125, 213, 123, 216, 120, 220, 136, 245, 102, 233, 99, 227, 102, 231, 110, 232, 103, 230, 86, 233, 115, 213, 200, 148, 177, 127, 240, 69, 233, 101, 234, 117, 207, 115, 217, 118, 237, 137, 249, 196, 134, 187, 170, 145, 186, 101, 247, 87, 229, 88, 239, 79, 224, 100, 243, 78, 245, 75, 246, 77, 248, 84, 232, 96, 217, 121, 215, 135, 244, 97, 231, 137, 194, 142, 174, 132, 185, 124, 219, 100, 194, 120, 218, 169, 145, 184, 205, 117, 168, 147, 179, 165, 192, 144, 200, 161, 147, 178, 126, 180, 146, 172, 127, 202, 115, 182, 144, 203, 113, 205, 136, 199, 113, 198, 114, 202, 112, 205, 130, 160, 117, 171, 144, 167, 145, 191, 137, 193, 143, 173, 133, 197, 116, 215, 94, 221, 83, 241, 72, 243, 74, 232, 69, 238, 73, 224, 85, 222, 82, 227, 81, 244, 76, 239, 80, 225, 78, 222, 103, 249, 93, 220, 104, 226, 90, 219, 85, 220, 84, 231, 61, 241, 64, 232, 70, 237, 72, 222, 80, 226, 61, 238, 51, 234, 66, 240, 59, 226, 76, 221, 81, 223, 87, 217, 80, 208, 135, 200, 112, 204, 118, 195, 136, 165, 126, 174, 122, 173, 116, 172, 123, 228, 106, 235, 68, 239, 71, 222, 77, 225, 75, 223, 70, 221, 82, 218, 83, 220, 77, 218, 79, 227, 89, 187, 100, 173, 92, 185, 91, 215, 83, 210, 109, 207, 84, 230, 64, 222, 110, 209, 121, 165, 139, 129, 161, 128, 163, 130, 167, 115, 168, 143, 164, 122, 214, 88, 216, 90, 186, 114, 196, 109, 203, 106, 206, 110, 199, 112, 159, 121, 178, 89, 213, 77, 227, 157, 117, 165, 113, 211, 79, 219, 78, 217, 75, 220, 73, 218, 72, 225, 63, 222, 69, 218, 74, 217, 86, 212, 82, 216, 76, 219, 81, 242, 60, 233, 68, 237, 67, 218, 71, 219, 66, 223, 105, 205, 79, 215, 72, 214, 71, 216, 78, 212, 72, 213, 71, 212, 73, 211, 74, 246, 55, 230, 62, 223, 68, 216, 69, 224, 61, 232, 58, 225, 60, 224, 59, 223, 61, 236, 53, 232, 52, 237, 48, 236, 49, 235, 50, 234, 57, 228, 156, 118, 164, 127, 162, 128, 158, 112, 164, 101, 159, 123, 163, 126, 162, 116, 166, 120, 175, 104, 158, 101, 200, 111, 160, 122, 169, 142, 170, 119, 163, 115, 174, 88, 187, 80, 210, 75, 209, 76, 208, 77, 207, 78, 206, 74, 210, 73, 217, 81, 229, 65, 220, 70, 215, 69, 214, 68, 217, 67, 216, 66, 221, 64, 219, 65, 214, 70, 213, 66, 218, 64, 220, 63, 221, 61, 222, 62, 229, 56, 223, 60, 221, 62, 218, 61, 219, 63, 217, 64, 213, 69, 212, 62, 220, 60, 222, 58, 227, 98, 196, 68, 215, 61, 247, 54, 231, 52, 230, 53, 229, 54, 228, 53, 225, 57, 218, 95, 195, 108, 204, 107, 202, 74, 195, 98, 158, 116, 161, 119, 155, 92, 176, 102, 199, 79, 178, 91, 177, 77, 179, 74, 207, 64, 206, 65, 210, 72, 211, 63, 207, 60, 219, 56, 226, 52, 233, 51, 232, 49, 233, 48, 231, 50, 230, 49, 229, 48, 226, 50, 228, 49, 225, 48, 234, 46, 237, 47, 232, 46, 231, 47, 235, 45, 233, 44, 232, 45, 230, 47, 228, 45, 231, 44, 230, 46, 229, 51, 224, 55, 227, 46, 225, 47, 226, 44, 229, 41, 228, 42, 227, 43, 226, 45, 225, 54, 221, 49, 224, 50, 223, 46, 221, 58, 210, 71, 204, 60, 208, 73, 209, 59, 220, 99, 194, 110, 192, 99, 159, 106, 162, 108, 161, 109, 160, 105, 154, 101, 182, 84, 175, 114, 169, 146, 183, 80, 198, 103, 160, 110, 157, 109, 201, 75, 178, 80, 172, 87, 188, 66, 203, 61, 206, 55, 217, 53, 211, 56, 199, 64, 216, 85, 174, 91, 154, 89, 190, 94, 159, 111, 166, 87, 176, 75, 175, 78, 172, 75, 184, 96, 194, 107, 180, 76, 200, 55, 208, 62, 214, 50, 219, 42, 224, 48, 213, 51, 209, 53, 222, 43, 231, 36, 217, 49, 212, 70, 177, 69, 178, 68, 186, 66, 205, 65, 198, 63, 205, 49, 215, 44, 214, 41, 215, 67, 202, 72, 191, 63, 201, 53, 204, 51, 191, 55, 220, 47, 218, 43, 225, 40, 204, 73, 173, 74, 176, 79, 168, 80, 174, 72, 175, 70, 176, 71, 174, 69, 195, 58, 216, 43, 223, 32, 203, 62, 202, 50, 211, 42, 221, 28, 223, 25, 221, 20, 206, 29, 222, 30, 203, 42, 200, 60, 186, 63, 183, 83, 185, 64, 189, 65, 187, 67, 180, 61, 185, 135, 181, 95, 152, 92, 153, 90, 155, 145, 95, 158, 108, 91, 152, 93, 169, 78, 158, 107, 114, 99, 157, 102, 163, 87, 170, 82, 153, 89, 155, 100, 156, 103, 162, 115, 100, 165, 88, 162, 150, 90, 151, 93, 156, 78, 164, 85, 181, 66, 197, 56, 207, 81, 171, 76, 169, 73, 172, 68, 174, 77, 168, 76, 166, 77, 165, 79, 155, 98, 160, 75, 167, 83, 154, 79, 163, 76, 159, 77, 162, 69, 166, 84, 152, 79, 170, 72, 173, 70, 159, 69, 169, 74, 165, 71, 170, 68, 179, 67, 178, 63, 182, 64, 249, 10, 219, 23, 224, 24, 223, 52, 208, 54, 192, 50, 209, 43, 199, 62, 187, 51, 195, 32, 205, 31, 201, 40, 199, 35, 218, 11, 248, 14, 221, 22, 223, 18, 216, 47, 238, 4, 203, 25, 195, 30, 208, 59, 182, 58, 180, 66, 179, 62, 184, 65, 181, 64, 177, 60, 176, 65, 172, 134, 121, 193, 53, 207, 48, 188, 50, 176, 64, 173, 86, 150, 79, 153, 78, 155, 104, 161, 74, 154, 69, 171, 66, 175, 67, 170, 148, 78, 151, 96, 157, 77, 155, 73, 150, 77, 153, 75, 164, 72, 161, 67, 154, 71, 147, 78, 152, 76, 151, 94, 146, 78, 149, 77, 156, 72, 153, 74, 152, 72, 150, 76, 157, 70, 165, 61, 171, 65, 156, 70, 153, 143, 76, 149, 74, 146, 71, 150, 70, 151, 75, 145, 72, 149, 69, 151, 67, 153, 65, 145, 74, 143, 77, 148, 73, 163, 68, 160, 63, 166, 64, 190, 54, 210, 46, 212, 41, 210, 3, 219, 15, 220, 26, 222, 27, 200, 39, 197, 42, 209, 7, 214, 47, 166, 60, 167, 62, 151, 141, 76, 144, 75, 158, 61, 160, 47, 185, 39, 189, 27, 201, 57, 172, 140, 73, 141, 75, 142, 74, 168, 59, 178, 55, 155, 59, 163, 57, 196, 40, 198, 8, 220, 21, 196, 22, 186, 51, 182, 21, 224, 45, 166, 54, 167, 134, 119, 55, 161, 60, 158, 64, 147, 70, 143, 72, 142, 70, 148, 68, 152, 59, 153, 104, 55, 180, 43, 166, 53, 169, 51, 163, 43, 161, 54, 179, 56, 177, 39, 190, 52, 173, 44, 192, 32, 191, 15, 186, 46, 184, 137, 74, 139, 73, 138, 126, 106, 97, 55, 165, 66, 162, 53, 155, 66, 146, 64, 143, 68, 144, 71, 141, 70, 164, 56, 175, 10, 173, 58, 154, 61, 151, 60, 159, 63, 150, 93, 106, 58, 183, 49, 165, 44, 160, 56, 154, 103, 59, 143, 66, 144, 65, 157, 47, 134, 61, 150, 67, 142, 69, 139, 67, 137, 60, 239, 1, 212, 37, 162, 46, 164, 50, 154, 54, 168, 39, 202, 33, 190, 23, 195, 41, 211, 2, 207, 5, 218, 16, 177, 14, 186, 29, 164, 41, 163, 45, 172, 52, 155, 101, 54, 156, 57, 159, 45, 213, 12, 188, 40, 174, 16, 182, 11, 174, 14, 191, 26, 184, 12, 217, 17, 224, 19, 222, 13, 197, 31, 225, 34, 204, 5, 196, 18, 192, 6, 216, 38, 179, 13, 178, 9, 184, 48, 167, 42, 159, 48, 154, 51, 142, 65, 148, 63, 149, 62, 144, 52, 156, 44, 170, 40, 167, 38, 160, 36, 159, 49, 155, 45, 187, 27, 159, 38, 168, 9, 177, 17, 143, 63, 145, 50, 104, 58, 158, 41, 156, 43, 157, 42, 183, 97, 48, 135, 43, 151, 92, 107, 56, 99, 53, 100, 52, 94, 58, 153, 44, 134, 68, 141, 72, 140, 71, 194, 34, 160, 40, 157, 38, 156, 39, 158, 37, 167, 9, 182, 2, 173, 6, 188, 28, 156, 37, 161, 35, 148, 41, 155, 42, 152, 40, 153, 39, 166, 126, 42, 149, 40, 151, 39, 155, 37, 169, 4, 176, 5, 193, 31, 151, 28, 137, 39, 147, 31, 155, 38, 166, 10, 180, 19, 189, 25, 160, 46, 136, 40, 165, 9, 213, 24, 156, 36, 133, 40, 154, 38, 153, 34, 97, 56, 89, 52, 171, 11, 170, 13, 147, 35, 134, 118, 128, 36, 130, 41, 126, 36, 132, 39, 149, 38, 152, 101, 51, 101, 116, 10, 143, 9, 139, 13, 187, 0, 168, 6, 174, 5, 180, 8, 206, 3, 170, 8, 178, 21, 158, 33, 153, 23, 151, 45, 93, 54, 108, 124, 17, 104, 92, 55, 107, 125, 41, 150, 85, 74, 28, 144, 25, 148, 38, 150, 24, 185, 1, 162, 80, 41, 127, 33, 125, 37, 157, 113, 60, 181, 7, 179, 20, 131, 40, 135, 123, 37, 149, 24, 115, 35, 133, 62, 112, 27, 155, 16, 149, 3, 181, 12, 172, 7, 167, 2, 160, 1, 149, 79, 54, 82, 39, 80, 53, 110, 121, 37, 154, 57, 95, 51, 90, 59, 117, 37, 152, 83, 73, 37, 129, 43, 84, 52, 113, 35, 157, 30, 163, 0, 164, 114, 25, 103, 17, 146, 16, 190, 18, 145, 14, 121, 16, 125, 36, 122, 38, 141, 66, 138, 11, 142, 7, 137, 3, 159, 32, 126, 18, 123, 109, 22, 130, 44, 87, 34, 82, 44, 94, 35, 152, 21, 148, 1, 166, 8, 152, 5, 175, 15, 156, 89, 77, 56, 91, 47, 99, 22, 111, 7, 114, 10, 97, 7, 91, 58, 88, 33, 154, 19, 151, 6, 138, 2, 156, 30, 161, 26, 113, 8, 94, 105, 49, 96, 50, 102, 16, 103, 15, 153, 0, 149, 81, 57, 106, 18, 108, 20, 107, 21, 112, 6, 139, 72, 30, 80, 34, 84, 48, 90, 45, 101, 15, 122, 13, 101, 26, 72, 27, 71, 28, 89, 8, 140, 4, 89, 49, 92, 46, 100, 21, 110, 23, 115, 9, 99, 13, 120, 36, 86, 50, 81, 69, 26, 74, 36, 119, 38, 48, 98, 23, 157, 29, 136, 75, 35, 96, 23, 136, 67, 53, 83, 32, 77, 22, 71, 30, 76, 32, 86, 46, 35, 92, 17, 128, 40, 81, 33, 82, 55, 78, 41, 30, 73, 29, 83, 52, 35, 78, 31, 127, 19, 107, 2, 106, 19, 69, 28, 84, 58, 68, 27, 70, 29, 81, 2, 109, 0, 138, 1, 139, 65, 21, 67, 23, 66, 24, 76, 15, 100, 14, 98, 6, 143, 5, 141, 12, 101, 1, 108, 3, 142, 64, 24, 68, 22, 66, 26, 73, 40, 29, 88, 14, 102, 0, 140, 5, 151, 85, 47, 57, 118, 11, 96, 20, 68, 19, 105, 18, 67, 19, 65, 23, 70, 17, 71, 11, 62, 12, 88, 10, 92, 6, 86, 45, 33, 85, 51, 63, 18, 68, 4, 93, 9, 90, 13, 65, 20, 66, 7, 95, 3, 83, 49, 60, 2, 66, 18, 69, 16, 72, 10, 62, 13, 70, 25, 75, 31, 87, 61, 1, 12, 67, 25, 11, 63, 9, 62, 6, 67, 27, 9, 23, 7, 63, 15, 4, 82, 8, 64, 18, 5, 63, 14, 3, 64, 22, 5, 63, 16, 74, 31, 79, 0, 62, 8, 65, 27, 0');
  TextTo_info_PANEL(G_color, 'Example 1 is loaded. Now you can press [Fast] or [Process], try\u00A0it.');
  Img_example('example_imgs/example1.jpg');
}

// Example 2
var $example2_BTN = $container.querySelector('#example2_BTN');
$example2_BTN.addEventListener('click', function() {
  StopDtawFl = true;
  setTimeout(ChainTXT_example2(), 1000);
});

function ChainTXT_example2() {
  $chain_TXT.val('[Strings:3058; d-Force:85; Refiner:2] 0, 221, 211, 245, 202, 215, 241, 185, 237, 179, 230, 190, 226, 173, 231, 189, 246, 208, 244, 229, 180, 230, 247, 204, 238, 184, 242, 181, 240, 196, 244, 186, 245, 183, 234, 186, 234, 172, 230, 164, 233, 187, 232, 188, 247, 206, 173, 217, 228, 184, 214, 180, 235, 182, 241, 212, 243, 197, 208, 172, 204, 174, 242, 178, 237, 176, 232, 249, 199, 173, 207, 196, 249, 171, 227, 216, 175, 246, 209, 219, 171, 244, 210, 248, 203, 239, 201, 248, 166, 249, 224, 182, 239, 153, 248, 198, 176, 215, 179, 236, 144, 231, 178, 238, 167, 242, 211, 171, 232, 168, 217, 167, 243, 155, 209, 170, 200, 172, 218, 166, 219, 163, 214, 168, 247, 150, 246, 147, 240, 148, 245, 151, 214, 166, 198, 174, 229, 183, 172, 210, 220, 194, 166, 204, 181, 213, 167, 203, 175, 225, 147, 233, 136, 228, 189, 212, 168, 192, 222, 164, 211, 147, 245, 160, 219, 141, 248, 142, 243, 135, 245, 133, 248, 143, 241, 149, 247, 169, 216, 161, 207, 163, 212, 149, 226, 140, 232, 165, 235, 142, 240, 129, 245, 138, 247, 132, 244, 157, 218, 158, 216, 178, 168, 202, 158, 207, 153, 209, 146, 238, 127, 244, 134, 246, 137, 222, 144, 239, 177, 166, 223, 145, 211, 169, 210, 180, 224, 162, 221, 165, 220, 162, 215, 160, 217, 159, 205, 165, 199, 158, 206, 154, 205, 155, 204, 160, 198, 159, 213, 152, 205, 195, 163, 201, 154, 215, 156, 208, 171, 234, 138, 237, 130, 241, 124, 234, 135, 227, 187, 175, 197, 161, 203, 155, 216, 135, 229, 116, 237, 126, 240, 121, 234, 143, 231, 121, 239, 132, 236, 133, 243, 150, 213, 185, 154, 208, 151, 206, 164, 200, 155, 249, 193, 152, 249, 131, 242, 134, 235, 133, 232, 138, 230, 134, 233, 119, 239, 128, 221, 142, 207, 145, 210, 148, 208, 144, 205, 146, 206, 142, 209, 150, 203, 156, 199, 189, 161, 220, 137, 206, 125, 223, 124, 219, 138, 218, 139, 205, 148, 212, 124, 206, 130, 246, 105, 209, 143, 208, 157, 217, 121, 223, 136, 224, 191, 181, 125, 242, 99, 238, 93, 230, 131, 220, 140, 207, 157, 202, 151, 201, 153, 187, 152, 199, 136, 205, 143, 203, 139, 207, 149, 204, 147, 202, 162, 196, 146, 156, 192, 148, 195, 147, 193, 135, 199, 145, 195, 149, 189, 139, 195, 165, 153, 215, 132, 203, 131, 215, 133, 202, 144, 200, 157, 191, 142, 179, 147, 198, 138, 207, 134, 227, 129, 201, 190, 151, 182, 139, 225, 127, 221, 116, 224, 114, 225, 123, 236, 122, 227, 81, 248, 109, 217, 108, 215, 95, 235, 120, 226, 115, 237, 117, 233, 101, 225, 118, 228, 117, 231, 113, 224, 115, 221, 120, 206, 127, 200, 131, 204, 121, 219, 115, 223, 112, 219, 117, 220, 116, 200, 134, 199, 129, 202, 150, 194, 127, 203, 120, 218, 123, 241, 97, 236, 90, 229, 102, 240, 94, 226, 96, 223, 113, 213, 107, 245, 79, 246, 78, 245, 76, 233, 89, 219, 119, 222, 114, 220, 111, 221, 118, 218, 110, 220, 122, 194, 134, 216, 117, 206, 123, 201, 120, 198, 132, 191, 123, 185, 129, 214, 111, 205, 113, 212, 110, 200, 124, 195, 114, 204, 117, 234, 88, 229, 188, 140, 173, 184, 130, 182, 144, 196, 138, 192, 114, 194, 115, 185, 117, 191, 122, 196, 133, 190, 136, 176, 125, 193, 128, 202, 121, 211, 112, 222, 96, 231, 83, 210, 118, 232, 99, 224, 126, 243, 77, 248, 66, 243, 79, 230, 91, 237, 73, 235, 70, 222, 82, 249, 71, 237, 66, 224, 73, 217, 119, 202, 108, 201, 169, 124, 190, 160, 129, 175, 126, 207, 141, 208, 104, 206, 103, 204, 104, 198, 119, 182, 123, 190, 138, 183, 134, 189, 158, 128, 189, 118, 203, 102, 206, 106, 212, 107, 228, 88, 216, 99, 206, 180, 170, 122, 193, 167, 126, 180, 117, 168, 125, 184, 135, 179, 118, 199, 121, 197, 113, 195, 111, 196, 110, 205, 109, 207, 107, 205, 112, 197, 109, 200, 108, 194, 109, 195, 110, 193, 108, 196, 116, 188, 150, 161, 124, 177, 120, 181, 111, 189, 107, 195, 121, 176, 118, 183, 115, 172, 119, 170, 115, 199, 171, 120, 169, 115, 191, 110, 199, 101, 203, 95, 239, 64, 246, 67, 238, 72, 236, 71, 233, 100, 204, 99, 198, 137, 174, 111, 244, 78, 226, 77, 244, 65, 243, 47, 248, 40, 249, 45, 243, 54, 246, 46, 240, 45, 244, 44, 240, 87, 234, 69, 222, 68, 228, 64, 238, 65, 237, 48, 238, 54, 228, 76, 242, 75, 227, 76, 225, 77, 221, 93, 203, 105, 201, 141, 187, 114, 186, 107, 191, 104, 197, 102, 201, 103, 205, 106, 185, 108, 177, 114, 179, 123, 167, 118, 182, 116, 184, 107, 214, 96, 189, 101, 186, 103, 182, 110, 183, 105, 192, 131, 247, 80, 213, 90, 212, 73, 209, 76, 231, 67, 227, 98, 206, 73, 195, 99, 192, 98, 196, 112, 180, 105, 184, 109, 218, 78, 241, 74, 220, 65, 235, 72, 225, 61, 239, 52, 233, 46, 239, 47, 238, 50, 235, 58, 231, 56, 236, 49, 241, 63, 234, 51, 231, 50, 234, 44, 241, 55, 245, 62, 221, 92, 232, 55, 218, 69, 223, 51, 225, 79, 194, 100, 201, 71, 204, 68, 199, 70, 212, 74, 247, 53, 228, 50, 223, 67, 205, 72, 203, 74, 213, 89, 215, 61, 224, 75, 226, 53, 227, 49, 225, 48, 232, 46, 231, 44, 246, 43, 245, 41, 247, 42, 241, 38, 237, 41, 239, 45, 236, 42, 244, 34, 236, 38, 245, 32, 238, 27, 236, 21, 244, 33, 243, 35, 249, 22, 243, 43, 240, 59, 221, 64, 213, 61, 220, 62, 199, 82, 210, 61, 222, 51, 224, 49, 222, 48, 229, 45, 235, 43, 229, 46, 242, 37, 246, 40, 240, 39, 235, 34, 241, 37, 248, 60, 220, 48, 221, 49, 228, 44, 227, 45, 230, 42, 232, 41, 227, 46, 226, 47, 223, 46, 224, 45, 233, 40, 231, 38, 234, 35, 233, 39, 232, 85, 216, 97, 192, 113, 188, 163, 126, 160, 115, 166, 119, 175, 109, 176, 108, 175, 110, 174, 130, 159, 127, 162, 119, 178, 106, 179, 105, 178, 107, 177, 106, 187, 97, 188, 96, 187, 98, 186, 97, 178, 104, 180, 96, 186, 99, 185, 100, 197, 72, 206, 59, 215, 94, 200, 65, 219, 47, 222, 46, 219, 48, 218, 47, 221, 45, 226, 63, 216, 48, 217, 47, 216, 46, 218, 57, 199, 93, 178, 113, 172, 112, 170, 114, 171, 113, 169, 116, 168, 122, 161, 125, 164, 152, 115, 161, 114, 168, 105, 177, 104, 170, 108, 174, 109, 169, 104, 181, 103, 190, 102, 183, 101, 181, 131, 156, 125, 113, 162, 121, 164, 120, 165, 117, 158, 122, 163, 118, 141, 112, 173, 111, 171, 101, 172, 110, 165, 104, 179, 98, 185, 95, 184, 100, 167, 109, 173, 107, 176, 106, 162, 123, 159, 149, 111, 164, 116, 151, 107, 175, 98, 191, 79, 177, 93, 179, 103, 193, 155, 104, 164, 110, 150, 109, 160, 100, 190, 148, 138, 112, 163, 105, 154, 144, 116, 159, 100, 183, 95, 181, 102, 202, 67, 188, 78, 208, 60, 201, 59, 213, 47, 215, 46, 225, 44, 224, 41, 230, 39, 226, 42, 229, 40, 228, 43, 225, 91, 183, 90, 175, 94, 180, 102, 174, 94, 182, 88, 214, 86, 196, 70, 198, 83, 180, 84, 175, 83, 185, 60, 196, 62, 214, 46, 220, 49, 185, 92, 178, 103, 173, 90, 170, 102, 169, 95, 190, 145, 110, 166, 103, 176, 91, 169, 89, 171, 97, 193, 74, 182, 99, 164, 96, 160, 87, 179, 88, 176, 93, 165, 98, 163, 84, 160, 99, 162, 88, 173, 94, 190, 66, 202, 64, 189, 68, 187, 57, 200, 61, 212, 46, 217, 44, 218, 45, 223, 42, 221, 38, 227, 35, 226, 40, 219, 43, 216, 45, 214, 43, 215, 44, 222, 41, 225, 52, 200, 59, 204, 63, 203, 69, 194, 75, 192, 69, 183, 60, 178, 81, 175, 92, 184, 76, 170, 101, 155, 95, 154, 101, 158, 88, 167, 89, 165, 90, 166, 135, 107, 145, 102, 153, 94, 181, 86, 173, 92, 174, 85, 165, 81, 162, 98, 159, 119, 147, 104, 152, 106, 151, 108, 144, 111, 148, 101, 152, 103, 156, 100, 168, 91, 164, 86, 154, 96, 140, 105, 151, 94, 156, 99, 145, 95, 148, 117, 143, 102, 141, 95, 172, 92, 149, 93, 153, 87, 156, 84, 155, 132, 92, 141, 87, 139, 95, 186, 73, 172, 69, 193, 55, 192, 71, 174, 70, 197, 59, 186, 61, 191, 72, 209, 80, 176, 74, 162, 72, 163, 97, 147, 157, 124, 111, 142, 91, 146, 98, 161, 89, 166, 79, 171, 68, 172, 75, 160, 72, 164, 90, 146, 93, 148, 89, 142, 97, 159, 85, 146, 106, 211, 46, 213, 45, 220, 39, 247, 26, 237, 18, 247, 30, 233, 36, 229, 34, 228, 28, 235, 22, 233, 9, 237, 33, 234, 27, 245, 20, 238, 37, 232, 27, 229, 24, 234, 29, 227, 26, 239, 31, 225, 36, 248, 25, 228, 37, 220, 42, 214, 44, 213, 43, 217, 41, 213, 42, 218, 37, 224, 35, 217, 39, 216, 40, 223, 36, 242, 23, 232, 30, 226, 25, 240, 14, 229, 58, 197, 52, 210, 46, 209, 44, 206, 45, 212, 41, 214, 40, 212, 39, 214, 77, 177, 78, 167, 83, 161, 74, 180, 134, 104, 137, 102, 157, 130, 97, 157, 78, 150, 86, 158, 75, 159, 81, 169, 76, 157, 75, 170, 69, 195, 58, 198, 45, 208, 43, 209, 41, 215, 36, 218, 38, 216, 35, 219, 34, 217, 37, 222, 31, 230, 33, 220, 31, 246, 19, 228, 15, 239, 16, 234, 21, 226, 27, 224, 28, 222, 30, 220, 29, 221, 32, 231, 11, 235, 20, 227, 19, 236, 10, 231, 13, 230, 23, 224, 20, 225, 22, 222, 27, 218, 29, 214, 38, 211, 40, 213, 31, 219, 32, 217, 53, 183, 67, 172, 70, 160, 68, 167, 67, 182, 53, 181, 65, 171, 64, 167, 65, 170, 73, 173, 71, 165, 64, 170, 80, 155, 126, 97, 138, 96, 137, 98, 136, 85, 139, 89, 144, 94, 152, 82, 148, 84, 143, 82, 168, 77, 154, 81, 152, 74, 158, 70, 184, 52, 193, 42, 208, 41, 210, 38, 208, 36, 211, 34, 210, 35, 207, 31, 217, 3, 227, 10, 218, 33, 211, 32, 210, 54, 187, 58, 202, 31, 210, 39, 209, 32, 208, 29, 211, 25, 221, 28, 223, 21, 221, 23, 241, 12, 230, 16, 226, 14, 228, 18, 223, 12, 232, 9, 221, 13, 229, 17, 225, 26, 208, 30, 207, 33, 204, 4, 223, 24, 219, 28, 215, 24, 213, 21, 215, 37, 212, 28, 210, 56, 196, 50, 192, 41, 185, 54, 186, 44, 180, 43, 198, 30, 178, 51, 191, 55, 189, 45, 197, 48, 200, 32, 183, 49, 199, 29, 207, 26, 197, 39, 185, 57, 188, 55, 190, 63, 171, 66, 169, 133, 91, 145, 115, 85, 130, 81, 132, 117, 72, 143, 90, 134, 86, 129, 90, 149, 80, 133, 82, 153, 79, 156, 76, 153, 100, 123, 87, 137, 118, 91, 124, 86, 145, 76, 151, 70, 164, 65, 169, 69, 166, 66, 163, 73, 159, 68, 161, 71, 157, 83, 142, 70, 153, 64, 161, 65, 172, 51, 184, 61, 171, 62, 170, 63, 162, 66, 160, 63, 165, 69, 158, 63, 159, 55, 166, 67, 168, 59, 165, 67, 155, 73, 150, 79, 149, 88, 140, 84, 146, 64, 151, 128, 99, 135, 89, 121, 70, 141, 83, 125, 88, 122, 93, 138, 84, 124, 81, 131, 116, 84, 118, 74, 154, 75, 149, 73, 144, 71, 156, 65, 163, 62, 167, 58, 201, 31, 190, 33, 177, 43, 187, 42, 206, 25, 207, 27, 196, 29, 209, 24, 207, 28, 198, 25, 208, 22, 211, 16, 216, 13, 213, 12, 211, 20, 210, 23, 220, 14, 215, 17, 212, 15, 219, 1, 204, 9, 199, 2, 230, 11, 226, 19, 208, 46, 160, 58, 168, 61, 163, 49, 172, 33, 189, 36, 205, 35, 191, 48, 195, 56, 175, 50, 162, 48, 168, 47, 162, 49, 132, 80, 131, 108, 71, 113, 87, 128, 78, 148, 114, 86, 137, 63, 155, 55, 165, 54, 166, 56, 179, 35, 182, 42, 195, 23, 207, 20, 222, 5, 216, 11, 214, 5, 233, 7, 211, 18, 207, 21, 209, 15, 208, 40, 193, 24, 206, 21, 203, 34, 205, 22, 195, 2, 208, 17, 202, 16, 182, 32, 179, 16, 207, 37, 139, 64, 152, 77, 148, 61, 154, 47, 163, 57, 161, 62, 157, 58, 152, 127, 77, 128, 92, 147, 62, 156, 44, 147, 55, 161, 59, 150, 66, 133, 107, 66, 142, 68, 149, 53, 194, 28, 191, 23, 190, 38, 192, 18, 189, 24, 194, 26, 178, 34, 188, 40, 181, 42, 157, 57, 170, 60, 164, 51, 173, 32, 177, 36, 165, 56, 176, 40, 186, 31, 200, 13, 178, 29, 175, 34, 164, 56, 167, 43, 166, 41, 158, 43, 159, 29, 177, 39, 184, 22, 193, 20, 185, 18, 203, 5, 197, 7, 209, 0, 192, 25, 186, 38, 180, 31, 176, 38, 166, 40, 152, 60, 146, 69, 145, 65, 144, 61, 140, 68, 141, 59, 151, 41, 154, 56, 170, 1, 193, 17, 210, 14, 212, 6, 196, 12, 182, 19, 186, 6, 202, 15, 190, 17, 238, 8, 180, 15, 177, 28, 176, 30, 188, 27, 173, 26, 187, 24, 154, 34, 181, 23, 176, 12, 201, 11, 200, 4, 194, 14, 173, 35, 150, 29, 151, 43, 155, 36, 147, 57, 146, 75, 124, 76, 125, 80, 123, 76, 127, 79, 130, 82, 136, 60, 140, 69, 112, 72, 118, 53, 142, 54, 148, 30, 174, 31, 149, 58, 137, 59, 136, 105, 74, 120, 83, 129, 82, 126, 79, 138, 65, 143, 119, 75, 125, 99, 60, 127, 78, 131, 57, 153, 67, 97, 58, 113, 48, 131, 45, 130, 57, 107, 72, 116, 73, 120, 110, 85, 135, 59, 125, 55, 121, 82, 122, 79, 129, 98, 57, 129, 61, 169, 20, 184, 9, 207, 3, 169, 52, 118, 80, 134, 62, 143, 35, 165, 18, 183, 11, 172, 25, 147, 31, 164, 14, 177, 13, 181, 21, 187, 5, 172, 23, 143, 36, 163, 32, 155, 12, 178, 9, 147, 26, 160, 19, 143, 27, 148, 38, 146, 47, 161, 50, 135, 40, 130, 23, 149, 17, 171, 2, 173, 7, 201, 10, 179, 6, 161, 51, 112, 49, 136, 106, 73, 119, 90, 58, 106, 65, 105, 66, 119, 83, 115, 75, 123, 92, 102, 71, 116, 64, 108, 52, 106, 62, 145, 56, 127, 37, 145, 32, 146, 30, 152, 34, 141, 31, 153, 33, 139, 35, 142, 15, 165, 39, 137, 32, 138, 38, 157, 14, 153, 22, 188, 4, 175, 10, 157, 3, 155, 6, 160, 8, 159, 16, 137, 27, 146, 28, 141, 54, 133, 50, 115, 104, 66, 102, 47, 113, 70, 114, 76, 122, 56, 128, 46, 98, 54, 144, 26, 135, 109, 96, 54, 120, 68, 110, 49, 114, 53, 134, 36, 133, 16, 154, 21, 146, 12, 138, 19, 148, 24, 145, 21, 141, 18, 152, 42, 156, 7, 145, 11, 154, 3, 146, 25, 128, 36, 136, 31, 127, 16, 191, 0, 170, 5, 147, 22, 136, 39, 132, 29, 174, 13, 137, 18, 136, 15, 132, 7, 149, 14, 142, 5, 122, 81, 67, 101, 89, 65, 22, 102, 50, 96, 56, 109, 51, 108, 49, 106, 51, 101, 47, 129, 41, 167, 1, 143, 30, 131, 95, 52, 117, 63, 104, 53, 99, 88, 58, 22, 131, 12, 148, 6, 136, 34, 140, 103, 93, 60, 100, 59, 105, 78, 126, 32, 124, 7, 138, 1, 153, 0, 154, 4, 156, 2, 152, 10, 139, 20, 101, 18, 144, 24, 151, 0, 146, 2, 139, 17, 140, 4, 130, 13, 133, 28, 150, 8, 137, 1, 142, 94, 59, 89, 57, 91, 52, 100, 51, 94, 50, 95, 48, 100, 72, 25, 126, 77, 111, 82, 47, 110, 55, 97, 87, 52, 93, 51, 92, 56, 90, 54, 81, 47, 92, 49, 93, 50, 91, 53, 119, 5, 133, 44, 125, 41, 90, 50, 88, 48, 97, 46, 112, 34, 129, 27, 56, 78, 66, 21, 100, 15, 141, 0, 140, 3, 133, 38, 88, 60, 86, 50, 107, 10, 131, 39, 89, 51, 116, 13, 102, 8, 128, 29, 86, 52, 105, 5, 121, 4, 150, 43, 95, 55, 123, 33, 113, 76, 50, 109, 69, 20, 120, 4, 132, 19, 129, 35, 106, 14, 134, 2, 116, 80, 48, 91, 49, 94, 84, 26, 125, 23, 114, 1, 130, 11, 129, 6, 123, 3, 129, 24, 84, 51, 87, 61, 85, 62, 83, 32, 87, 49, 96, 15, 94, 19, 81, 29, 83, 52, 111, 70, 46, 92, 64, 103, 63, 77, 49, 103, 75, 51, 111, 45, 73, 19, 70, 29, 80, 16, 83, 33, 82, 53, 85, 8, 94, 44, 97, 7, 99, 74, 53, 39, 108, 68, 20, 84, 23, 76, 8, 38, 27, 8, 90, 43, 98, 14, 101, 6, 104, 12, 117, 0, 83, 71, 45, 93, 55, 79, 36, 5, 97, 14, 74, 18, 87, 59, 46, 0, 75, 9, 84, 1, 74, 13, 82, 15, 73, 16, 93, 10, 127, 40, 91, 7, 103, 17, 71, 15, 72, 14, 81, 34, 44, 0, 71, 11, 82, 10, 72, 16, 70, 10, 73, 9, 95, 12, 62, 19, 60, 6, 88, 37, 9, 127, 30, 79, 47, 61, 20, 59, 21, 48, 78, 26, 57, 40, 3, 131, 28, 86, 35, 0, 80, 54, 1, 43, 33, 5, 81, 7, 77, 24, 57, 23, 5, 39, 3, 68, 17, 126, 42, 2, 68, 4, 38, 1, 70, 18, 67, 32, 3, 34, 1, 42, 31, 4, 63, 18, 6, 29, 5, 30, 4, 37, 2, 41, 15, 3, 31, 1, 69, 16, 5, 28, 7, 18, 64, 11, 1, 33, 2, 45, 12, 0');
  TextTo_info_PANEL(G_color, 'Example 2 is loaded. Now you can press [Fast] or [Process], try\u00A0it.');
  Img_example('example_imgs/example2.jpg');
}

// Example 3
var $example3_BTN = $container.querySelector('#example3_BTN');
$example3_BTN.addEventListener('click', function() {
  StopDtawFl = true;
  setTimeout(ChainTXT_example3(), 1000);
});

function ChainTXT_example3() {
  $chain_TXT.val('[Strings:4058; d-Force:36; Refiner:2] 0, 198, 246, 198, 243, 197, 248, 196, 245, 201, 249, 199, 243, 194, 248, 191, 249, 195, 247, 200, 239, 201, 246, 195, 242, 189, 248, 192, 245, 190, 246, 188, 244, 191, 241, 198, 239, 192, 238, 199, 240, 190, 239, 187, 247, 193, 243, 185, 242, 186, 240, 189, 241, 196, 232, 189, 249, 181, 243, 188, 245, 184, 240, 182, 242, 177, 233, 184, 241, 183, 246, 171, 242, 169, 247, 168, 243, 176, 240, 197, 184, 238, 183, 236, 181, 238, 170, 246, 179, 236, 185, 232, 187, 201, 237, 225, 170, 217, 181, 244, 175, 213, 223, 176, 235, 182, 248, 163, 246, 165, 249, 161, 248, 160, 249, 159, 248, 166, 244, 165, 247, 208, 172, 245, 180, 241, 178, 239, 169, 240, 164, 247, 167, 243, 166, 238, 164, 244, 161, 243, 165, 245, 174, 235, 186, 200, 237, 166, 242, 163, 245, 160, 244, 158, 246, 173, 241, 231, 174, 236, 191, 203, 172, 241, 160, 243, 158, 249, 154, 248, 162, 247, 157, 246, 159, 245, 156, 243, 162, 239, 165, 236, 163, 238, 162, 242, 167, 234, 165, 231, 167, 218, 169, 233, 182, 210, 222, 178, 232, 166, 222, 163, 240, 161, 239, 160, 240, 156, 246, 155, 247, 150, 246, 152, 245, 153, 248, 148, 246, 146, 248, 149, 247, 154, 244, 152, 249, 216, 163, 215, 166, 235, 164, 237, 160, 235, 224, 165, 232, 162, 234, 161, 236, 158, 239, 228, 150, 245, 147, 247, 151, 244, 155, 240, 229, 158, 242, 159, 241, 154, 238, 146, 244, 148, 241, 152, 242, 147, 249, 144, 247, 145, 248, 143, 249, 141, 247, 143, 243, 153, 240, 145, 246, 140, 245, 141, 248, 139, 247, 142, 241, 144, 239, 143, 240, 142, 244, 139, 245, 138, 248, 136, 244, 157, 234, 192, 230, 161, 233, 148, 235, 145, 238, 139, 239, 180, 221, 209, 175, 207, 219, 161, 220, 160, 232, 148, 236, 147, 237, 171, 209, 164, 214, 161, 218, 162, 217, 165, 223, 157, 230, 154, 214, 204, 171, 210, 161, 207, 165, 206, 166, 213, 163, 231, 147, 233, 146, 236, 155, 229, 147, 232, 146, 234, 145, 236, 144, 242, 141, 241, 140, 249, 137, 243, 138, 247, 132, 239, 134, 238, 143, 234, 144, 232, 145, 233, 159, 219, 158, 209, 162, 216, 227, 147, 230, 146, 231, 145, 229, 146, 228, 145, 230, 144, 233, 143, 235, 142, 232, 140, 236, 141, 231, 143, 237, 139, 242, 137, 241, 138, 236, 139, 246, 133, 243, 136, 240, 131, 239, 137, 237, 134, 242, 135, 241, 168, 212, 156, 207, 158, 199, 168, 226, 141, 229, 144, 228, 142, 227, 144, 207, 163, 211, 169, 221, 185, 198, 161, 217, 141, 228, 153, 210, 155, 213, 141, 233, 137, 245, 149, 211, 148, 199, 141, 227, 143, 230, 140, 234, 134, 241, 130, 238, 132, 242, 129, 238, 135, 233, 139, 235, 132, 236, 130, 239, 133, 237, 136, 232, 138, 230, 134, 245, 126, 236, 129, 237, 131, 243, 128, 235, 131, 234, 132, 232, 126, 235, 130, 231, 139, 229, 140, 227, 139, 219, 143, 206, 164, 208, 160, 218, 140, 228, 152, 214, 151, 210, 154, 215, 205, 162, 197, 165, 203, 156, 208, 149, 215, 137, 227, 146, 225, 132, 227, 134, 229, 126, 234, 127, 231, 135, 249, 114, 234, 120, 248, 113, 235, 119, 246, 109, 249, 98, 234, 125, 232, 123, 229, 136, 228, 135, 226, 130, 233, 129, 240, 117, 232, 124, 233, 133, 230, 131, 228, 138, 220, 135, 218, 133, 214, 139, 207, 152, 212, 167, 221, 132, 220, 131, 225, 127, 228, 128, 230, 124, 231, 129, 227, 145, 208, 138, 198, 159, 202, 157, 200, 167, 204, 155, 209, 137, 207, 135, 213, 133, 219, 134, 217, 136, 216, 140, 197, 138, 200, 135, 197, 141, 204, 144, 205, 166, 201, 143, 205, 137, 222, 129, 221, 130, 217, 129, 226, 128, 237, 122, 229, 121, 231, 125, 228, 123, 233, 119, 224, 127, 227, 126, 219, 132, 216, 129, 213, 134, 209, 132, 207, 150, 212, 136, 223, 128, 238, 195, 140, 202, 142, 203, 134, 208, 136, 210, 133, 205, 132, 191, 133, 215, 130, 212, 129, 220, 123, 230, 190, 135, 211, 131, 209, 129, 208, 130, 207, 131, 206, 130, 211, 128, 222, 121, 218, 127, 244, 93, 246, 106, 241, 115, 229, 120, 227, 125, 215, 123, 217, 121, 228, 118, 227, 122, 230, 114, 243, 110, 245, 96, 227, 114, 222, 115, 224, 118, 247, 112, 231, 189, 141, 194, 140, 201, 134, 196, 139, 194, 134, 202, 130, 210, 128, 212, 125, 214, 126, 226, 124, 216, 122, 215, 124, 214, 127, 213, 126, 211, 125, 207, 129, 239, 193, 183, 133, 204, 125, 213, 124, 212, 127, 209, 128, 205, 131, 201, 128, 195, 142, 193, 131, 200, 127, 210, 126, 225, 117, 237, 173, 133, 189, 179, 129, 203, 126, 206, 176, 132, 177, 129, 190, 140, 199, 137, 198, 136, 199, 127, 202, 126, 223, 119, 220, 120, 217, 119, 214, 123, 213, 119, 215, 121, 216, 120, 218, 118, 223, 112, 248, 108, 247, 90, 248, 89, 244, 104, 242, 94, 243, 93, 241, 88, 248, 116, 240, 89, 247, 97, 231, 100, 222, 94, 225, 96, 249, 111, 237, 116, 221, 117, 216, 118, 213, 120, 219, 115, 218, 112, 219, 116, 215, 117, 212, 116, 213, 115, 233, 188, 134, 182, 192, 131, 189, 128, 208, 119, 226, 111, 217, 114, 208, 117, 214, 122, 210, 123, 207, 122, 211, 121, 207, 115, 212, 120, 211, 118, 209, 124, 206, 122, 204, 124, 199, 122, 203, 125, 202, 123, 200, 121, 206, 114, 207, 119, 196, 137, 187, 135, 185, 121, 202, 114, 216, 112, 214, 110, 216, 174, 132, 184, 130, 187, 114, 197, 127, 239, 89, 249, 83, 247, 86, 244, 109, 216, 113, 208, 120, 210, 112, 206, 120, 203, 117, 211, 116, 191, 123, 195, 138, 175, 129, 181, 171, 129, 198, 126, 179, 127, 184, 124, 190, 180, 134, 172, 130, 192, 119, 185, 123, 182, 124, 181, 137, 178, 128, 177, 141, 186, 117, 194, 122, 201, 120, 171, 124, 176, 126, 180, 131, 183, 122, 168, 120, 177, 162, 120, 181, 125, 180, 121, 204, 112, 208, 109, 211, 108, 212, 99, 210, 110, 207, 113, 215, 170, 130, 174, 123, 205, 169, 126, 167, 124, 173, 121, 205, 154, 120, 184, 116, 205, 115, 200, 112, 202, 110, 206, 109, 215, 111, 219, 88, 240, 90, 245, 85, 244, 87, 239, 101, 230, 87, 232, 69, 235, 90, 242, 107, 208, 97, 210, 108, 214, 111, 221, 90, 238, 104, 205, 113, 209, 111, 203, 109, 207, 101, 226, 98, 205, 97, 203, 113, 198, 118, 193, 107, 191, 158, 124, 172, 125, 170, 121, 176, 128, 188, 115, 185, 113, 199, 112, 236, 89, 238, 91, 237, 79, 234, 70, 237, 57, 235, 89, 246, 80, 236, 82, 248, 84, 242, 105, 214, 87, 212, 105, 195, 111, 200, 110, 196, 104, 190, 159, 121, 183, 114, 201, 109, 209, 106, 198, 152, 121, 174, 119, 177, 117, 180, 114, 177, 116, 174, 117, 173, 123, 179, 115, 181, 113, 183, 110, 182, 118, 176, 114, 179, 110, 188, 104, 191, 109, 204, 150, 122, 172, 119, 171, 114, 175, 115, 173, 118, 172, 116, 178, 135, 122, 169, 116, 168, 130, 165, 118, 170, 115, 169, 114, 186, 112, 184, 109, 197, 99, 206, 153, 163, 118, 159, 114, 156, 116, 167, 115, 178, 113, 192, 108, 217, 91, 216, 90, 197, 106, 194, 101, 202, 151, 118, 152, 114, 189, 105, 193, 106, 187, 111, 186, 107, 182, 112, 181, 109, 179, 112, 213, 88, 233, 89, 243, 103, 228, 84, 241, 86, 230, 85, 225, 103, 188, 105, 185, 108, 183, 106, 184, 105, 187, 104, 181, 111, 177, 113, 220, 93, 222, 82, 225, 84, 245, 77, 249, 62, 245, 83, 233, 74, 238, 102, 229, 77, 227, 83, 224, 84, 231, 70, 229, 65, 231, 67, 233, 71, 239, 92, 223, 80, 225, 63, 222, 80, 221, 79, 226, 77, 210, 87, 215, 76, 214, 74, 221, 81, 220, 94, 194, 157, 115, 174, 111, 173, 112, 175, 110, 174, 113, 172, 112, 180, 107, 179, 105, 180, 104, 179, 106, 177, 108, 176, 109, 175, 108, 174, 109, 173, 110, 199, 102, 192, 149, 114, 170, 113, 171, 112, 178, 127, 166, 117, 165, 113, 169, 111, 172, 110, 178, 105, 177, 104, 178, 107, 201, 98, 189, 91, 183, 92, 187, 103, 185, 102, 182, 103, 181, 99, 202, 97, 181, 101, 180, 102, 177, 107, 176, 106, 175, 107, 174, 106, 172, 109, 200, 144, 155, 115, 168, 111, 159, 106, 211, 74, 240, 72, 242, 62, 232, 56, 231, 75, 219, 80, 217, 81, 218, 79, 248, 64, 223, 57, 229, 62, 234, 58, 241, 52, 242, 51, 238, 78, 218, 73, 212, 75, 236, 55, 239, 61, 226, 62, 230, 56, 235, 68, 228, 86, 243, 60, 244, 95, 200, 100, 179, 103, 168, 112, 170, 110, 169, 107, 173, 108, 171, 109, 170, 104, 175, 105, 176, 100, 178, 101, 175, 100, 199, 145, 160, 110, 154, 116, 166, 107, 171, 102, 174, 99, 173, 100, 171, 101, 172, 99, 166, 105, 169, 119, 150, 161, 113, 157, 112, 150, 110, 157, 105, 186, 76, 189, 87, 201, 81, 192, 85, 197, 95, 208, 77, 207, 63, 246, 59, 245, 50, 239, 47, 242, 49, 246, 54, 223, 62, 225, 65, 220, 62, 221, 64, 228, 60, 226, 58, 227, 56, 220, 82, 203, 75, 210, 74, 208, 71, 210, 61, 222, 57, 234, 51, 237, 50, 238, 47, 237, 48, 240, 49, 235, 50, 234, 49, 236, 52, 233, 51, 248, 42, 244, 37, 241, 46, 243, 44, 238, 46, 240, 43, 246, 45, 242, 40, 246, 34, 244, 31, 239, 43, 243, 39, 247, 29, 240, 27, 239, 39, 235, 44, 249, 38, 243, 36, 245, 33, 235, 47, 234, 48, 233, 49, 228, 51, 230, 52, 232, 53, 229, 44, 230, 48, 232, 50, 231, 43, 237, 30, 246, 32, 238, 40, 229, 47, 223, 96, 206, 72, 205, 61, 215, 78, 217, 65, 219, 54, 222, 47, 236, 32, 229, 34, 234, 27, 238, 29, 237, 46, 227, 50, 220, 64, 212, 88, 200, 93, 171, 98, 172, 92, 168, 97, 166, 103, 154, 105, 204, 69, 189, 79, 195, 86, 199, 65, 218, 89, 183, 142, 112, 147, 111, 153, 113, 167, 102, 159, 99, 175, 85, 183, 76, 175, 87, 174, 85, 190, 77, 213, 62, 218, 57, 225, 67, 202, 62, 201, 67, 204, 96, 157, 102, 184, 86, 200, 62, 199, 80, 188, 77, 192, 94, 169, 101, 165, 100, 185, 78, 195, 62, 204, 61, 207, 84, 182, 86, 187, 90, 181, 88, 179, 91, 180, 90, 165, 98, 178, 131, 120, 148, 108, 153, 106, 150, 102, 170, 93, 198, 61, 206, 56, 216, 50, 226, 53, 206, 70, 192, 143, 111, 149, 103, 138, 99, 153, 100, 158, 94, 156, 107, 151, 105, 162, 98, 167, 109, 147, 96, 159, 85, 181, 75, 182, 79, 187, 77, 185, 83, 171, 81, 169, 134, 100, 155, 97, 154, 94, 196, 61, 201, 63, 224, 45, 225, 44, 224, 43, 225, 58, 217, 48, 220, 45, 228, 40, 232, 42, 226, 40, 225, 42, 230, 39, 227, 41, 231, 38, 225, 39, 226, 37, 232, 55, 218, 46, 223, 51, 213, 50, 214, 49, 215, 58, 221, 44, 222, 41, 224, 39, 233, 31, 235, 24, 241, 26, 239, 59, 195, 61, 202, 82, 177, 86, 173, 87, 172, 88, 180, 79, 177, 77, 191, 139, 96, 166, 91, 167, 104, 209, 73, 211, 58, 208, 48, 216, 45, 223, 43, 221, 47, 205, 53, 207, 49, 204, 53, 219, 42, 221, 41, 220, 43, 218, 54, 203, 72, 167, 86, 176, 89, 178, 95, 161, 86, 170, 133, 100, 137, 96, 160, 98, 153, 95, 149, 107, 148, 94, 155, 92, 152, 101, 151, 141, 113, 146, 94, 151, 115, 145, 95, 150, 92, 154, 93, 157, 85, 163, 88, 139, 98, 141, 94, 140, 95, 160, 86, 168, 83, 184, 74, 176, 84, 179, 80, 157, 84, 173, 82, 155, 91, 156, 80, 158, 83, 163, 77, 152, 91, 151, 93, 148, 92, 149, 91, 150, 82, 174, 79, 194, 61, 200, 53, 201, 48, 215, 41, 217, 42, 223, 40, 222, 38, 228, 35, 243, 23, 233, 36, 227, 27, 229, 22, 234, 33, 232, 24, 227, 52, 212, 46, 211, 55, 196, 58, 209, 51, 200, 64, 174, 76, 173, 79, 197, 53, 194, 52, 202, 56, 192, 55, 193, 54, 196, 51, 195, 50, 194, 51, 198, 60, 190, 54, 191, 53, 193, 52, 189, 53, 192, 49, 193, 51, 197, 48, 192, 50, 206, 46, 204, 47, 209, 45, 202, 47, 214, 41, 218, 40, 219, 39, 220, 36, 217, 40, 221, 38, 218, 39, 215, 36, 226, 28, 218, 35, 223, 37, 222, 33, 224, 34, 221, 30, 225, 32, 217, 43, 213, 40, 214, 44, 206, 41, 216, 42, 205, 41, 199, 45, 197, 41, 202, 46, 203, 44, 207, 39, 216, 37, 214, 38, 205, 43, 203, 42, 200, 44, 198, 47, 193, 45, 192, 51, 191, 70, 188, 52, 190, 50, 191, 49, 190, 57, 187, 50, 189, 51, 188, 49, 210, 37, 206, 35, 216, 33, 200, 35, 210, 36, 203, 37, 219, 34, 215, 17, 235, 21, 230, 26, 224, 20, 233, 25, 228, 23, 227, 66, 182, 67, 185, 49, 186, 46, 195, 44, 204, 164, 89, 154, 80, 155, 79, 156, 84, 170, 132, 101, 130, 96, 134, 98, 135, 94, 132, 88, 164, 76, 180, 75, 152, 81, 149, 82, 151, 90, 153, 83, 159, 86, 141, 92, 143, 97, 142, 93, 146, 91, 135, 93, 138, 95, 131, 83, 170, 74, 164, 60, 163, 76, 165, 59, 183, 49, 196, 43, 198, 37, 205, 39, 197, 37, 195, 43, 194, 44, 193, 42, 196, 38, 212, 28, 211, 32, 210, 28, 219, 31, 220, 24, 226, 29, 222, 27, 223, 26, 225, 19, 234, 12, 224, 15, 229, 18, 226, 25, 231, 13, 216, 30, 236, 16, 223, 9, 224, 8, 225, 7, 227, 14, 230, 6, 225, 25, 211, 34, 208, 32, 203, 29, 221, 22, 218, 31, 205, 30, 204, 31, 202, 29, 205, 34, 199, 35, 197, 33, 199, 36, 198, 34, 201, 31, 199, 29, 201, 32, 197, 34, 195, 32, 198, 31, 197, 36, 196, 41, 191, 48, 190, 44, 186, 48, 188, 68, 184, 48, 189, 47, 185, 45, 182, 48, 183, 46, 184, 47, 187, 43, 209, 9, 222, 21, 219, 16, 226, 5, 213, 15, 215, 3, 222, 10, 221, 27, 205, 28, 203, 30, 208, 26, 202, 25, 201, 28, 204, 40, 193, 39, 192, 40, 191, 42, 190, 41, 194, 37, 191, 56, 163, 64, 175, 78, 169, 87, 162, 76, 179, 66, 180, 47, 177, 48, 179, 68, 181, 45, 184, 41, 182, 40, 180, 41, 181, 46, 189, 42, 185, 69, 162, 60, 173, 47, 188, 39, 181, 42, 183, 37, 190, 35, 194, 38, 193, 32, 200, 30, 194, 33, 192, 32, 191, 34, 190, 31, 193, 30, 198, 25, 203, 24, 204, 27, 212, 23, 204, 22, 208, 17, 201, 27, 199, 24, 200, 28, 195, 27, 190, 30, 191, 33, 187, 31, 192, 61, 157, 78, 151, 77, 150, 80, 148, 116, 129, 83, 135, 86, 139, 92, 126, 96, 144, 87, 145, 75, 144, 77, 147, 81, 172, 128, 91, 142, 75, 148, 74, 142, 85, 178, 40, 184, 38, 180, 35, 186, 33, 196, 26, 205, 71, 171, 47, 179, 41, 177, 38, 189, 30, 217, 1, 223, 20, 200, 15, 220, 11, 203, 21, 199, 11, 207, 13, 219, 18, 211, 8, 209, 16, 212, 19, 202, 16, 196, 22, 228, 4, 221, 12, 201, 7, 210, 5, 201, 14, 200, 23, 195, 22, 198, 29, 194, 28, 193, 29, 192, 28, 189, 27, 194, 25, 197, 12, 198, 11, 197, 21, 195, 26, 192, 18, 195, 14, 202, 9, 208, 10, 200, 9, 197, 63, 176, 38, 182, 37, 178, 35, 188, 32, 186, 29, 191, 24, 194, 36, 185, 33, 183, 31, 188, 30, 184, 34, 182, 70, 161, 76, 141, 75, 147, 78, 155, 60, 167, 45, 174, 38, 179, 31, 185, 29, 184, 32, 178, 39, 175, 37, 174, 36, 177, 73, 147, 89, 166, 45, 173, 36, 176, 34, 175, 35, 174, 44, 164, 43, 165, 71, 141, 72, 145, 73, 148, 61, 172, 55, 148, 54, 145, 79, 146, 78, 156, 56, 162, 43, 163, 45, 170, 34, 174, 32, 176, 33, 182, 136, 85, 140, 76, 146, 80, 153, 117, 54, 155, 84, 143, 87, 137, 76, 138, 75, 139, 74, 138, 81, 136, 75, 137, 82, 135, 75, 143, 73, 144, 78, 154, 60, 161, 42, 162, 45, 157, 42, 165, 40, 161, 43, 167, 41, 162, 44, 172, 46, 171, 35, 173, 38, 168, 36, 166, 35, 172, 32, 170, 31, 175, 33, 169, 34, 168, 37, 162, 32, 168, 33, 171, 66, 140, 72, 142, 73, 139, 72, 138, 84, 132, 82, 131, 72, 144, 79, 159, 37, 167, 34, 214, 4, 211, 6, 197, 13, 196, 20, 194, 11, 192, 22, 189, 26, 188, 28, 187, 26, 190, 24, 176, 22, 187, 11, 196, 9, 192, 20, 191, 23, 188, 27, 185, 28, 183, 30, 180, 65, 140, 71, 139, 70, 138, 73, 136, 89, 42, 160, 43, 158, 41, 160, 32, 182, 28, 186, 26, 185, 23, 190, 25, 193, 21, 190, 19, 176, 30, 178, 68, 132, 81, 133, 99, 65, 138, 71, 136, 70, 137, 74, 134, 80, 133, 74, 135, 73, 133, 71, 129, 86, 127, 85, 130, 84, 128, 81, 130, 72, 143, 90, 41, 163, 36, 165, 31, 168, 30, 171, 29, 165, 34, 173, 27, 184, 23, 186, 9, 199, 10, 198, 8, 203, 4, 199, 5, 216, 2, 197, 5, 196, 12, 195, 13, 191, 10, 195, 6, 192, 12, 193, 8, 200, 1, 198, 15, 190, 13, 185, 10, 188, 6, 194, 2, 195, 4, 192, 7, 191, 12, 184, 7, 185, 6, 193, 16, 171, 23, 175, 24, 183, 9, 189, 25, 174, 7, 178, 21, 179, 6, 212, 3, 196, 0, 192, 3, 193, 2, 188, 4, 178, 28, 166, 30, 170, 26, 162, 31, 160, 36, 164, 35, 163, 30, 169, 25, 163, 29, 160, 26, 168, 125, 93, 45, 98, 65, 101, 54, 151, 36, 159, 32, 164, 24, 163, 33, 158, 25, 162, 24, 168, 21, 166, 23, 163, 28, 161, 35, 157, 26, 161, 30, 159, 44, 155, 21, 158, 22, 165, 27, 167, 38, 181, 49, 144, 52, 147, 22, 157, 28, 172, 39, 141, 67, 133, 79, 123, 68, 131, 69, 136, 97, 65, 129, 72, 128, 83, 127, 69, 142, 78, 153, 104, 66, 105, 55, 149, 60, 152, 59, 120, 68, 128, 71, 134, 87, 126, 85, 41, 89, 125, 69, 137, 39, 156, 31, 137, 64, 136, 29, 156, 33, 177, 6, 186, 11, 190, 1, 194, 5, 191, 0, 188, 8, 187, 5, 189, 3, 177, 8, 172, 3, 187, 17, 170, 6, 168, 8, 176, 9, 160, 27, 182, 10, 171, 20, 158, 27, 180, 5, 186, 18, 169, 7, 173, 2, 186, 1, 189, 58, 153, 38, 152, 62, 123, 60, 150, 25, 161, 4, 183, 0, 194, 14, 166, 46, 91, 44, 87, 33, 129, 36, 138, 63, 127, 71, 143, 53, 146, 56, 120, 60, 133, 29, 181, 57, 154, 27, 153, 21, 157, 40, 95, 65, 54, 127, 84, 35, 91, 40, 140, 77, 88, 40, 130, 70, 135, 28, 159, 19, 155, 14, 157, 24, 154, 23, 152, 18, 163, 6, 160, 4, 171, 2, 178, 5, 169, 13, 167, 2, 179, 1, 180, 0, 187, 51, 148, 27, 125, 70, 124, 113, 67, 132, 73, 103, 66, 139, 38, 143, 51, 142, 50, 146, 26, 145, 108, 57, 104, 39, 149, 25, 146, 22, 142, 23, 151, 24, 150, 21, 164, 17, 151, 19, 162, 12, 159, 6, 165, 15, 164, 34, 91, 102, 66, 107, 119, 68, 126, 26, 156, 43, 92, 39, 132, 61, 122, 69, 121, 83, 39, 89, 38, 141, 22, 143, 21, 141, 23, 156, 15, 152, 12, 156, 4, 165, 3, 162, 2, 165, 10, 175, 0, 161, 7, 157, 3, 160, 0, 163, 11, 164, 5, 159, 9, 158, 47, 97, 48, 110, 56, 119, 59, 122, 81, 35, 139, 21, 148, 18, 143, 20, 147, 24, 144, 16, 149, 19, 147, 14, 150, 15, 144, 19, 142, 20, 154, 6, 153, 7, 158, 13, 151, 6, 158, 2, 174, 1, 159, 0, 158, 1, 157, 2, 156, 3, 154, 4, 155, 5, 152, 9, 150, 7, 149, 5, 151, 4, 153, 3, 155, 0, 153, 2, 154, 1, 150, 3, 151, 0, 156, 8, 148, 17, 146, 4, 148, 12, 142, 9, 147, 118, 68, 134, 31, 140, 24, 130, 15, 145, 13, 136, 22, 138, 19, 139, 20, 135, 37, 120, 58, 124, 28, 134, 18, 132, 32, 128, 25, 126, 24, 127, 23, 126, 115, 32, 91, 30, 84, 38, 90, 37, 92, 29, 116, 22, 120, 53, 117, 61, 121, 28, 123, 25, 84, 34, 119, 60, 118, 58, 107, 52, 118, 26, 129, 82, 34, 117, 68, 57, 102, 56, 131, 14, 144, 3, 146, 7, 145, 8, 143, 5, 147, 6, 145, 4, 152, 2, 149, 0, 157, 10, 141, 3, 147, 1, 148, 0, 147, 2, 146, 1, 144, 7, 140, 4, 138, 21, 137, 3, 142, 5, 136, 4, 143, 2, 145, 0, 140, 8, 122, 20, 123, 19, 121, 21, 124, 18, 117, 21, 115, 31, 89, 26, 125, 63, 76, 34, 78, 25, 119, 51, 109, 49, 111, 67, 112, 14, 129, 11, 135, 6, 139, 9, 124, 11, 123, 23, 128, 13, 131, 7, 122, 27, 85, 33, 82, 38, 105, 24, 125, 86, 96, 66, 106, 94, 66, 100, 17, 114, 22, 85, 7, 117, 19, 120, 4, 134, 5, 131, 80, 69, 24, 89, 36, 79, 33, 77, 32, 79, 29, 80, 35, 90, 17, 99, 18, 115, 19, 98, 18, 118, 20, 119, 5, 118, 3, 139, 0, 142, 2, 137, 10, 128, 15, 133, 6, 123, 64, 34, 24, 84, 28, 81, 27, 77, 25, 91, 15, 113, 2, 118, 6, 121, 8, 90, 15, 81, 18, 116, 5, 115, 3, 117, 59, 106, 50, 103, 53, 35, 75, 32, 83, 37, 88, 43, 108, 67, 22, 78, 36, 93, 2, 119, 4, 116, 1, 138, 12, 109, 1, 143, 16, 99, 1, 136, 0, 120, 9, 105, 49, 107, 11, 126, 13, 110, 0, 115, 23, 82, 17, 97, 20, 79, 16, 95, 3, 121, 10, 125, 71, 25, 80, 28, 76, 21, 66, 19, 96, 49, 32, 88, 42, 94, 1, 93, 3, 101, 11, 108, 12, 127, 72, 23, 77, 18, 88, 26, 70, 20, 78, 30, 73, 60, 19, 80, 31, 83, 2, 95, 0, 111, 14, 81, 2, 80, 15, 77, 37, 86, 1, 119, 62, 74, 33, 52, 19, 67, 20, 65, 17, 70, 18, 69, 26, 75, 29, 74, 15, 72, 16, 100, 55, 21, 48, 19, 68, 18, 64, 17, 71, 16, 73, 14, 63, 16, 66, 56, 16, 70, 23, 102, 50, 18, 57, 23, 75, 31, 47, 18, 49, 20, 55, 17, 69, 27, 87, 0, 89, 9, 106, 10, 88, 3, 85, 1, 83, 13, 74, 12, 67, 9, 49, 12, 66, 15, 71, 30, 43, 18, 54, 17, 78, 1, 114, 6, 18, 53, 16, 64, 13, 65, 11, 69, 1, 81, 40, 9, 53, 11, 63, 13, 58, 8, 66, 10, 65, 15, 59, 7, 104, 51, 5, 44, 8, 47, 16, 54, 22, 102, 4, 57, 14, 82, 39, 12, 2, 63, 1, 88, 45, 16, 55, 14, 72, 29, 42, 11, 64, 0, 82, 3, 14, 48, 15, 54, 10, 43, 8, 54, 7, 46, 20, 7, 50, 17, 52, 4, 15, 56, 26, 37, 0');
  TextTo_info_PANEL(G_color, 'Example 3 is loaded. Now you can press [Fast] or [Process], try\u00A0it.');
  Img_example('example_imgs/example3.jpg');
}
